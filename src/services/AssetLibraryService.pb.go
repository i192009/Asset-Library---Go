// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: AssetLibraryService.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      *string `protobuf:"bytes,14,opt,name=appId,proto3,oneof" json:"appId,omitempty"`
	UserId     *string `protobuf:"bytes,15,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	InstanceId *string `protobuf:"bytes,16,opt,name=instanceId,proto3,oneof" json:"instanceId,omitempty"`
	TenantId   *string `protobuf:"bytes,17,opt,name=tenantId,proto3,oneof" json:"tenantId,omitempty"`
}

func (x *CommonRequest) Reset() {
	*x = CommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRequest) ProtoMessage() {}

func (x *CommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRequest.ProtoReflect.Descriptor instead.
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{0}
}

func (x *CommonRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *CommonRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CommonRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *CommonRequest) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

type AddClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest    *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	Name             string         `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	Description      string         `protobuf:"bytes,30,opt,name=description,proto3" json:"description,omitempty"`
	Types            []string       `protobuf:"bytes,40,rep,name=types,proto3" json:"types,omitempty"`
	MaxSize          int64          `protobuf:"varint,50,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	Source           string         `protobuf:"bytes,60,opt,name=source,proto3" json:"source,omitempty"`
	Creator          string         `protobuf:"bytes,70,opt,name=creator,proto3" json:"creator,omitempty"`
	PeimitInstanceID []string       `protobuf:"bytes,80,rep,name=peimitInstanceID,proto3" json:"peimitInstanceID,omitempty"`
	IsTranfrom       bool           `protobuf:"varint,90,opt,name=isTranfrom,proto3" json:"isTranfrom,omitempty"`
	Pipelines        *anypb.Any     `protobuf:"bytes,100,opt,name=pipelines,proto3" json:"pipelines,omitempty"`
}

func (x *AddClassRequest) Reset() {
	*x = AddClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClassRequest) ProtoMessage() {}

func (x *AddClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClassRequest.ProtoReflect.Descriptor instead.
func (*AddClassRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{1}
}

func (x *AddClassRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *AddClassRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddClassRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddClassRequest) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *AddClassRequest) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *AddClassRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AddClassRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *AddClassRequest) GetPeimitInstanceID() []string {
	if x != nil {
		return x.PeimitInstanceID
	}
	return nil
}

func (x *AddClassRequest) GetIsTranfrom() bool {
	if x != nil {
		return x.IsTranfrom
	}
	return false
}

func (x *AddClassRequest) GetPipelines() *anypb.Any {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type AddClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ClassId string `protobuf:"bytes,3,opt,name=classId,proto3" json:"classId,omitempty"`
}

func (x *AddClassResponse) Reset() {
	*x = AddClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClassResponse) ProtoMessage() {}

func (x *AddClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClassResponse.ProtoReflect.Descriptor instead.
func (*AddClassResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{2}
}

func (x *AddClassResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddClassResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddClassResponse) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type UpdateClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest    *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	ClassId          string         `protobuf:"bytes,20,opt,name=classId,proto3" json:"classId,omitempty"`
	Name             *string        `protobuf:"bytes,30,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description      *string        `protobuf:"bytes,40,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Types            []string       `protobuf:"bytes,50,rep,name=types,proto3" json:"types,omitempty"`
	MaxSize          *int64         `protobuf:"varint,60,opt,name=maxSize,proto3,oneof" json:"maxSize,omitempty"`
	PeimitInstanceID []string       `protobuf:"bytes,90,rep,name=peimitInstanceID,proto3" json:"peimitInstanceID,omitempty"`
	IsTranfrom       *bool          `protobuf:"varint,100,opt,name=isTranfrom,proto3,oneof" json:"isTranfrom,omitempty"`
	Pipelines        *anypb.Any     `protobuf:"bytes,110,opt,name=pipelines,proto3,oneof" json:"pipelines,omitempty"`
}

func (x *UpdateClassRequest) Reset() {
	*x = UpdateClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClassRequest) ProtoMessage() {}

func (x *UpdateClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClassRequest.ProtoReflect.Descriptor instead.
func (*UpdateClassRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateClassRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *UpdateClassRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *UpdateClassRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateClassRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateClassRequest) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *UpdateClassRequest) GetMaxSize() int64 {
	if x != nil && x.MaxSize != nil {
		return *x.MaxSize
	}
	return 0
}

func (x *UpdateClassRequest) GetPeimitInstanceID() []string {
	if x != nil {
		return x.PeimitInstanceID
	}
	return nil
}

func (x *UpdateClassRequest) GetIsTranfrom() bool {
	if x != nil && x.IsTranfrom != nil {
		return *x.IsTranfrom
	}
	return false
}

func (x *UpdateClassRequest) GetPipelines() *anypb.Any {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type UpdateClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateClassResponse) Reset() {
	*x = UpdateClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClassResponse) ProtoMessage() {}

func (x *UpdateClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClassResponse.ProtoReflect.Descriptor instead.
func (*UpdateClassResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateClassResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClassResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	ClassId       string         `protobuf:"bytes,20,opt,name=classId,proto3" json:"classId,omitempty"`
}

func (x *DeleteClassRequest) Reset() {
	*x = DeleteClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClassRequest) ProtoMessage() {}

func (x *DeleteClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClassRequest.ProtoReflect.Descriptor instead.
func (*DeleteClassRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteClassRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *DeleteClassRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type DeleteClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteClassResponse) Reset() {
	*x = DeleteClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClassResponse) ProtoMessage() {}

func (x *DeleteClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClassResponse.ProtoReflect.Descriptor instead.
func (*DeleteClassResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteClassResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteClassResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
}

func (x *QueryClassRequest) Reset() {
	*x = QueryClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClassRequest) ProtoMessage() {}

func (x *QueryClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClassRequest.ProtoReflect.Descriptor instead.
func (*QueryClassRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{7}
}

func (x *QueryClassRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

type QueryClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Classes []*Class `protobuf:"bytes,3,rep,name=classes,proto3" json:"classes,omitempty"`
}

func (x *QueryClassResponse) Reset() {
	*x = QueryClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClassResponse) ProtoMessage() {}

func (x *QueryClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClassResponse.ProtoReflect.Descriptor instead.
func (*QueryClassResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{8}
}

func (x *QueryClassResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryClassResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryClassResponse) GetClasses() []*Class {
	if x != nil {
		return x.Classes
	}
	return nil
}

type Class struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId          string     `protobuf:"bytes,1,opt,name=classId,proto3" json:"classId,omitempty"`
	Name             string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Types            []string   `protobuf:"bytes,4,rep,name=types,proto3" json:"types,omitempty"`
	MaxSize          int64      `protobuf:"varint,5,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	Source           string     `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Creator          string     `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	PeimitInstanceID []string   `protobuf:"bytes,8,rep,name=peimitInstanceID,proto3" json:"peimitInstanceID,omitempty"`
	IsTranfrom       bool       `protobuf:"varint,9,opt,name=isTranfrom,proto3" json:"isTranfrom,omitempty"`
	Pipelines        *anypb.Any `protobuf:"bytes,10,opt,name=pipelines,proto3" json:"pipelines,omitempty"`
}

func (x *Class) Reset() {
	*x = Class{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Class) ProtoMessage() {}

func (x *Class) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Class.ProtoReflect.Descriptor instead.
func (*Class) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{9}
}

func (x *Class) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *Class) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Class) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Class) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Class) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Class) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Class) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Class) GetPeimitInstanceID() []string {
	if x != nil {
		return x.PeimitInstanceID
	}
	return nil
}

func (x *Class) GetIsTranfrom() bool {
	if x != nil {
		return x.IsTranfrom
	}
	return false
}

func (x *Class) GetPipelines() *anypb.Any {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type GetClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	ClassId       string         `protobuf:"bytes,20,opt,name=classId,proto3" json:"classId,omitempty"`
}

func (x *GetClassRequest) Reset() {
	*x = GetClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassRequest) ProtoMessage() {}

func (x *GetClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassRequest.ProtoReflect.Descriptor instead.
func (*GetClassRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{10}
}

func (x *GetClassRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *GetClassRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type GetClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Class   *Class `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *GetClassResponse) Reset() {
	*x = GetClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassResponse) ProtoMessage() {}

func (x *GetClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassResponse.ProtoReflect.Descriptor instead.
func (*GetClassResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{11}
}

func (x *GetClassResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClassResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClassResponse) GetClass() *Class {
	if x != nil {
		return x.Class
	}
	return nil
}

type QueryAssetPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Name           string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type           int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Platform       string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Owner          string   `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	PermissionType string   `protobuf:"bytes,8,opt,name=permissionType,proto3" json:"permissionType,omitempty"`
	Class          *string  `protobuf:"bytes,9,opt,name=class,proto3,oneof" json:"class,omitempty"`
	Tags           []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Search         *string  `protobuf:"bytes,11,opt,name=search,proto3,oneof" json:"search,omitempty"`
	Order          *string  `protobuf:"bytes,12,opt,name=order,proto3,oneof" json:"order,omitempty"`
	Sort           *int32   `protobuf:"varint,13,opt,name=sort,proto3,oneof" json:"sort,omitempty"` //排序 0 - 升序， 1 - 降序
	AppId          string   `protobuf:"bytes,14,opt,name=appId,proto3" json:"appId,omitempty"`
	UserId         string   `protobuf:"bytes,15,opt,name=userId,proto3" json:"userId,omitempty"`
	InstanceId     string   `protobuf:"bytes,16,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *QueryAssetPageRequest) Reset() {
	*x = QueryAssetPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAssetPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAssetPageRequest) ProtoMessage() {}

func (x *QueryAssetPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAssetPageRequest.ProtoReflect.Descriptor instead.
func (*QueryAssetPageRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{12}
}

func (x *QueryAssetPageRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryAssetPageRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryAssetPageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryAssetPageRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *QueryAssetPageRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *QueryAssetPageRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *QueryAssetPageRequest) GetPermissionType() string {
	if x != nil {
		return x.PermissionType
	}
	return ""
}

func (x *QueryAssetPageRequest) GetClass() string {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return ""
}

func (x *QueryAssetPageRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QueryAssetPageRequest) GetSearch() string {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return ""
}

func (x *QueryAssetPageRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *QueryAssetPageRequest) GetSort() int32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *QueryAssetPageRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *QueryAssetPageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QueryAssetPageRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type QueryAssetPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Page     int64    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64    `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64    `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	Asset    []*Asset `protobuf:"bytes,6,rep,name=Asset,proto3" json:"Asset,omitempty"`
}

func (x *QueryAssetPageResponse) Reset() {
	*x = QueryAssetPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAssetPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAssetPageResponse) ProtoMessage() {}

func (x *QueryAssetPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAssetPageResponse.ProtoReflect.Descriptor instead.
func (*QueryAssetPageResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{13}
}

func (x *QueryAssetPageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryAssetPageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryAssetPageResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryAssetPageResponse) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryAssetPageResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryAssetPageResponse) GetAsset() []*Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FileName             string                      `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileSize             int64                       `protobuf:"varint,3,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	Type                 string                      `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Class                string                      `protobuf:"bytes,5,opt,name=Class,proto3" json:"Class,omitempty"`
	ClassName            string                      `protobuf:"bytes,6,opt,name=ClassName,proto3" json:"ClassName,omitempty"`
	Tags                 []string                    `protobuf:"bytes,7,rep,name=Tags,proto3" json:"Tags,omitempty"`
	TagsName             []string                    `protobuf:"bytes,8,rep,name=TagsName,proto3" json:"TagsName,omitempty"`
	Title                string                      `protobuf:"bytes,9,opt,name=Title,proto3" json:"Title,omitempty"`
	InstanceId           string                      `protobuf:"bytes,10,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	AppId                string                      `protobuf:"bytes,11,opt,name=AppId,proto3" json:"AppId,omitempty"`
	Description          string                      `protobuf:"bytes,12,opt,name=Description,proto3" json:"Description,omitempty"`
	Thumbnail            string                      `protobuf:"bytes,13,opt,name=Thumbnail,proto3" json:"Thumbnail,omitempty"`
	ThumbnailDownloadUrl string                      `protobuf:"bytes,14,opt,name=ThumbnailDownloadUrl,proto3" json:"ThumbnailDownloadUrl,omitempty"`
	Url                  string                      `protobuf:"bytes,15,opt,name=Url,proto3" json:"Url,omitempty"`
	AssetDownloadUrl     string                      `protobuf:"bytes,16,opt,name=AssetDownloadUrl,proto3" json:"AssetDownloadUrl,omitempty"`
	PermissionType       string                      `protobuf:"bytes,17,opt,name=PermissionType,proto3" json:"PermissionType,omitempty"`
	Status               int32                       `protobuf:"varint,18,opt,name=Status,proto3" json:"Status,omitempty"`
	Source               string                      `protobuf:"bytes,19,opt,name=Source,proto3" json:"Source,omitempty"`
	External             map[string]*structpb.Struct `protobuf:"bytes,20,rep,name=External,proto3" json:"External,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Creator              string                      `protobuf:"bytes,21,opt,name=Creator,proto3" json:"Creator,omitempty"`
	CreatorName          string                      `protobuf:"bytes,22,opt,name=CreatorName,proto3" json:"CreatorName,omitempty"`
	Owner                string                      `protobuf:"bytes,23,opt,name=Owner,proto3" json:"Owner,omitempty"`
	RelatedAssets        []string                    `protobuf:"bytes,24,rep,name=RelatedAssets,proto3" json:"RelatedAssets,omitempty"`
	CreateTime           string                      `protobuf:"bytes,25,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime           string                      `protobuf:"bytes,26,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{14}
}

func (x *Asset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Asset) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Asset) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Asset) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Asset) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Asset) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Asset) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Asset) GetTagsName() []string {
	if x != nil {
		return x.TagsName
	}
	return nil
}

func (x *Asset) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Asset) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Asset) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Asset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Asset) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *Asset) GetThumbnailDownloadUrl() string {
	if x != nil {
		return x.ThumbnailDownloadUrl
	}
	return ""
}

func (x *Asset) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Asset) GetAssetDownloadUrl() string {
	if x != nil {
		return x.AssetDownloadUrl
	}
	return ""
}

func (x *Asset) GetPermissionType() string {
	if x != nil {
		return x.PermissionType
	}
	return ""
}

func (x *Asset) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Asset) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Asset) GetExternal() map[string]*structpb.Struct {
	if x != nil {
		return x.External
	}
	return nil
}

func (x *Asset) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Asset) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *Asset) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Asset) GetRelatedAssets() []string {
	if x != nil {
		return x.RelatedAssets
	}
	return nil
}

func (x *Asset) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Asset) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type AddAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                      `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Size           int64                       `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	Type           string                      `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
	Class          string                      `protobuf:"bytes,30,opt,name=class,proto3" json:"class,omitempty"`
	Platforms      []string                    `protobuf:"bytes,31,rep,name=platforms,proto3" json:"platforms,omitempty"`
	Tags           []string                    `protobuf:"bytes,40,rep,name=tags,proto3" json:"tags,omitempty"`
	Title          string                      `protobuf:"bytes,50,opt,name=title,proto3" json:"title,omitempty"`
	InstanceId     string                      `protobuf:"bytes,60,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	AppId          string                      `protobuf:"bytes,70,opt,name=appId,proto3" json:"appId,omitempty"`
	Description    string                      `protobuf:"bytes,80,opt,name=description,proto3" json:"description,omitempty"`
	Thumbnail      string                      `protobuf:"bytes,90,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ThumbnailSize  int64                       `protobuf:"varint,91,opt,name=thumbnailSize,proto3" json:"thumbnailSize,omitempty"`
	ThumbnailType  string                      `protobuf:"bytes,92,opt,name=thumbnailType,proto3" json:"thumbnailType,omitempty"`
	Url            string                      `protobuf:"bytes,100,opt,name=url,proto3" json:"url,omitempty"`
	PermissionType string                      `protobuf:"bytes,110,opt,name=permissionType,proto3" json:"permissionType,omitempty"`
	Source         string                      `protobuf:"bytes,120,opt,name=source,proto3" json:"source,omitempty"`
	UserId         string                      `protobuf:"bytes,130,opt,name=userId,proto3" json:"userId,omitempty"`
	Owner          string                      `protobuf:"bytes,140,opt,name=owner,proto3" json:"owner,omitempty"`
	RelatedAssets  []string                    `protobuf:"bytes,150,rep,name=relatedAssets,proto3" json:"relatedAssets,omitempty"`
	External       map[string]*structpb.Struct `protobuf:"bytes,160,rep,name=External,proto3" json:"External,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddAssetRequest) Reset() {
	*x = AddAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetRequest) ProtoMessage() {}

func (x *AddAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetRequest.ProtoReflect.Descriptor instead.
func (*AddAssetRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{15}
}

func (x *AddAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddAssetRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddAssetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddAssetRequest) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *AddAssetRequest) GetPlatforms() []string {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *AddAssetRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AddAssetRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddAssetRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AddAssetRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AddAssetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddAssetRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *AddAssetRequest) GetThumbnailSize() int64 {
	if x != nil {
		return x.ThumbnailSize
	}
	return 0
}

func (x *AddAssetRequest) GetThumbnailType() string {
	if x != nil {
		return x.ThumbnailType
	}
	return ""
}

func (x *AddAssetRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddAssetRequest) GetPermissionType() string {
	if x != nil {
		return x.PermissionType
	}
	return ""
}

func (x *AddAssetRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AddAssetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddAssetRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AddAssetRequest) GetRelatedAssets() []string {
	if x != nil {
		return x.RelatedAssets
	}
	return nil
}

func (x *AddAssetRequest) GetExternal() map[string]*structpb.Struct {
	if x != nil {
		return x.External
	}
	return nil
}

type AddAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           int32             `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
	AssetId        string            `protobuf:"bytes,30,opt,name=AssetId,proto3" json:"AssetId,omitempty"`
	AssetUploadUrl string            `protobuf:"bytes,40,opt,name=AssetUploadUrl,proto3" json:"AssetUploadUrl,omitempty"`
	ThumbUploadUrl string            `protobuf:"bytes,50,opt,name=ThumbUploadUrl,proto3" json:"ThumbUploadUrl,omitempty"`
	OtherFiles     map[string]string `protobuf:"bytes,60,rep,name=OtherFiles,proto3" json:"OtherFiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddAssetResponse) Reset() {
	*x = AddAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetResponse) ProtoMessage() {}

func (x *AddAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetResponse.ProtoReflect.Descriptor instead.
func (*AddAssetResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{16}
}

func (x *AddAssetResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddAssetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddAssetResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *AddAssetResponse) GetAssetUploadUrl() string {
	if x != nil {
		return x.AssetUploadUrl
	}
	return ""
}

func (x *AddAssetResponse) GetThumbUploadUrl() string {
	if x != nil {
		return x.ThumbUploadUrl
	}
	return ""
}

func (x *AddAssetResponse) GetOtherFiles() map[string]string {
	if x != nil {
		return x.OtherFiles
	}
	return nil
}

type AssetUploadedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	PermissionType string `protobuf:"bytes,20,opt,name=permissionType,proto3" json:"permissionType,omitempty"`
}

func (x *AssetUploadedRequest) Reset() {
	*x = AssetUploadedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetUploadedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetUploadedRequest) ProtoMessage() {}

func (x *AssetUploadedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetUploadedRequest.ProtoReflect.Descriptor instead.
func (*AssetUploadedRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{17}
}

func (x *AssetUploadedRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssetUploadedRequest) GetPermissionType() string {
	if x != nil {
		return x.PermissionType
	}
	return ""
}

type AssetUploadedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AssetUploadedResponse) Reset() {
	*x = AssetUploadedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetUploadedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetUploadedResponse) ProtoMessage() {}

func (x *AssetUploadedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetUploadedResponse.ProtoReflect.Descriptor instead.
func (*AssetUploadedResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{18}
}

func (x *AssetUploadedResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AssetUploadedResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// string type = 30;
	// string class = 40;
	Tags  []string `protobuf:"bytes,50,rep,name=tags,proto3" json:"tags,omitempty"`
	Title string   `protobuf:"bytes,60,opt,name=title,proto3" json:"title,omitempty"`
	// string instanceId = 70;
	AppId          string `protobuf:"bytes,80,opt,name=appId,proto3" json:"appId,omitempty"`
	Description    string `protobuf:"bytes,90,opt,name=description,proto3" json:"description,omitempty"`
	ThumbnailSize  int64  `protobuf:"varint,91,opt,name=thumbnailSize,proto3" json:"thumbnailSize,omitempty"`
	Thumbnail      string `protobuf:"bytes,100,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Url            string `protobuf:"bytes,110,opt,name=url,proto3" json:"url,omitempty"`
	PermissionType string `protobuf:"bytes,120,opt,name=permissionType,proto3" json:"permissionType,omitempty"`
	// string source = 130;
	UserId string `protobuf:"bytes,140,opt,name=userId,proto3" json:"userId,omitempty"`
	// string owner = 150;
	// repeated string relatedAssets = 160;
	External map[string]*structpb.Struct `protobuf:"bytes,160,rep,name=External,proto3" json:"External,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateAssetRequest) Reset() {
	*x = UpdateAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetRequest) ProtoMessage() {}

func (x *UpdateAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateAssetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAssetRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateAssetRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateAssetRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UpdateAssetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAssetRequest) GetThumbnailSize() int64 {
	if x != nil {
		return x.ThumbnailSize
	}
	return 0
}

func (x *UpdateAssetRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *UpdateAssetRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateAssetRequest) GetPermissionType() string {
	if x != nil {
		return x.PermissionType
	}
	return ""
}

func (x *UpdateAssetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateAssetRequest) GetExternal() map[string]*structpb.Struct {
	if x != nil {
		return x.External
	}
	return nil
}

type UpdateAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateAssetResponse) Reset() {
	*x = UpdateAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetResponse) ProtoMessage() {}

func (x *UpdateAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetResponse.ProtoReflect.Descriptor instead.
func (*UpdateAssetResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateAssetResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateAssetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest  *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	Id             string         `protobuf:"bytes,20,opt,name=id,proto3" json:"id,omitempty"`
	PermissionType string         `protobuf:"bytes,30,opt,name=permissionType,proto3" json:"permissionType,omitempty"`
}

func (x *DeleteAssetRequest) Reset() {
	*x = DeleteAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetRequest) ProtoMessage() {}

func (x *DeleteAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssetRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteAssetRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *DeleteAssetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteAssetRequest) GetPermissionType() string {
	if x != nil {
		return x.PermissionType
	}
	return ""
}

type DeleteAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteAssetResponse) Reset() {
	*x = DeleteAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetResponse) ProtoMessage() {}

func (x *DeleteAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetResponse.ProtoReflect.Descriptor instead.
func (*DeleteAssetResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAssetResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteAssetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest  *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	Id             string         `protobuf:"bytes,20,opt,name=id,proto3" json:"id,omitempty"`
	PermissionType string         `protobuf:"bytes,30,opt,name=permissionType,proto3" json:"permissionType,omitempty"`
}

func (x *GetAssetRequest) Reset() {
	*x = GetAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetRequest) ProtoMessage() {}

func (x *GetAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetRequest.ProtoReflect.Descriptor instead.
func (*GetAssetRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{23}
}

func (x *GetAssetRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *GetAssetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAssetRequest) GetPermissionType() string {
	if x != nil {
		return x.PermissionType
	}
	return ""
}

type GetAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Asset   *Asset `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *GetAssetResponse) Reset() {
	*x = GetAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetResponse) ProtoMessage() {}

func (x *GetAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetResponse.ProtoReflect.Descriptor instead.
func (*GetAssetResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{24}
}

func (x *GetAssetResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAssetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAssetResponse) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

type UpdateAssetThumbnailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest  *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	AssetId        string         `protobuf:"bytes,20,opt,name=assetId,proto3" json:"assetId,omitempty"`
	PermissionType string         `protobuf:"bytes,30,opt,name=permissionType,proto3" json:"permissionType,omitempty"`
	ThumbnailSize  int64          `protobuf:"varint,40,opt,name=thumbnailSize,proto3" json:"thumbnailSize,omitempty"`
}

func (x *UpdateAssetThumbnailRequest) Reset() {
	*x = UpdateAssetThumbnailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetThumbnailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetThumbnailRequest) ProtoMessage() {}

func (x *UpdateAssetThumbnailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetThumbnailRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetThumbnailRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateAssetThumbnailRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *UpdateAssetThumbnailRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *UpdateAssetThumbnailRequest) GetPermissionType() string {
	if x != nil {
		return x.PermissionType
	}
	return ""
}

func (x *UpdateAssetThumbnailRequest) GetThumbnailSize() int64 {
	if x != nil {
		return x.ThumbnailSize
	}
	return 0
}

type UpdateAssetThumbnailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
	Thumbnail string `protobuf:"bytes,30,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *UpdateAssetThumbnailResponse) Reset() {
	*x = UpdateAssetThumbnailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetThumbnailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetThumbnailResponse) ProtoMessage() {}

func (x *UpdateAssetThumbnailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetThumbnailResponse.ProtoReflect.Descriptor instead.
func (*UpdateAssetThumbnailResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateAssetThumbnailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateAssetThumbnailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateAssetThumbnailResponse) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

// 标签
type AddTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	Name          string         `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	Description   string         `protobuf:"bytes,30,opt,name=description,proto3" json:"description,omitempty"`
	AppId         string         `protobuf:"bytes,40,opt,name=appId,proto3" json:"appId,omitempty"`
	ClassId       string         `protobuf:"bytes,50,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	Source        string         `protobuf:"bytes,60,opt,name=Source,proto3" json:"Source,omitempty"`
	UserId        string         `protobuf:"bytes,70,opt,name=userId,proto3" json:"userId,omitempty"`
	Owner         string         `protobuf:"bytes,80,opt,name=owner,proto3" json:"owner,omitempty"`
	Type          string         `protobuf:"bytes,90,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AddTagRequest) Reset() {
	*x = AddTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagRequest) ProtoMessage() {}

func (x *AddTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagRequest.ProtoReflect.Descriptor instead.
func (*AddTagRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{27}
}

func (x *AddTagRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *AddTagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTagRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddTagRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AddTagRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *AddTagRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AddTagRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddTagRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AddTagRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AddTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
	TagId   string `protobuf:"bytes,30,opt,name=tagId,proto3" json:"tagId,omitempty"`
}

func (x *AddTagResponse) Reset() {
	*x = AddTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagResponse) ProtoMessage() {}

func (x *AddTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagResponse.ProtoReflect.Descriptor instead.
func (*AddTagResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{28}
}

func (x *AddTagResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddTagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddTagResponse) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

type UpdateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	Id            string         `protobuf:"bytes,20,opt,name=id,proto3" json:"id,omitempty"`
	Name          string         `protobuf:"bytes,30,opt,name=name,proto3" json:"name,omitempty"`
	Description   string         `protobuf:"bytes,40,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateTagRequest) Reset() {
	*x = UpdateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagRequest) ProtoMessage() {}

func (x *UpdateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagRequest.ProtoReflect.Descriptor instead.
func (*UpdateTagRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateTagRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *UpdateTagRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTagRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateTagResponse) Reset() {
	*x = UpdateTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagResponse) ProtoMessage() {}

func (x *UpdateTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagResponse.ProtoReflect.Descriptor instead.
func (*UpdateTagResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateTagResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateTagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	Id            string         `protobuf:"bytes,20,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTagRequest) Reset() {
	*x = DeleteTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest) ProtoMessage() {}

func (x *DeleteTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteTagRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *DeleteTagRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTagResponse) Reset() {
	*x = DeleteTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResponse) ProtoMessage() {}

func (x *DeleteTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteTagResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteTagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	Name          *string        `protobuf:"bytes,20,opt,name=name,proto3,oneof" json:"name,omitempty"`
	ClassId       *string        `protobuf:"bytes,40,opt,name=classId,proto3,oneof" json:"classId,omitempty"`
	Owner         *string        `protobuf:"bytes,70,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Type          *string        `protobuf:"bytes,80,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *QueryTagRequest) Reset() {
	*x = QueryTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTagRequest) ProtoMessage() {}

func (x *QueryTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTagRequest.ProtoReflect.Descriptor instead.
func (*QueryTagRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{33}
}

func (x *QueryTagRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *QueryTagRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QueryTagRequest) GetClassId() string {
	if x != nil && x.ClassId != nil {
		return *x.ClassId
	}
	return ""
}

func (x *QueryTagRequest) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *QueryTagRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type QueryTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
	Tag     []*Tag `protobuf:"bytes,30,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *QueryTagResponse) Reset() {
	*x = QueryTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTagResponse) ProtoMessage() {}

func (x *QueryTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTagResponse.ProtoReflect.Descriptor instead.
func (*QueryTagResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{34}
}

func (x *QueryTagResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryTagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryTagResponse) GetTag() []*Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type QueryTagListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRequest *CommonRequest `protobuf:"bytes,10,opt,name=commonRequest,proto3" json:"commonRequest,omitempty"`
	Owner         string         `protobuf:"bytes,70,opt,name=owner,proto3" json:"owner,omitempty"`
	Type          string         `protobuf:"bytes,80,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QueryTagListRequest) Reset() {
	*x = QueryTagListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTagListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTagListRequest) ProtoMessage() {}

func (x *QueryTagListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTagListRequest.ProtoReflect.Descriptor instead.
func (*QueryTagListRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{35}
}

func (x *QueryTagListRequest) GetCommonRequest() *CommonRequest {
	if x != nil {
		return x.CommonRequest
	}
	return nil
}

func (x *QueryTagListRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *QueryTagListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type QueryTagListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
	Tag     []*Tag `protobuf:"bytes,30,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *QueryTagListResponse) Reset() {
	*x = QueryTagListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTagListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTagListResponse) ProtoMessage() {}

func (x *QueryTagListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTagListResponse.ProtoReflect.Descriptor instead.
func (*QueryTagListResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{36}
}

func (x *QueryTagListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryTagListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryTagListResponse) GetTag() []*Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,30,opt,name=description,proto3" json:"description,omitempty"`
	AppId       string `protobuf:"bytes,40,opt,name=appId,proto3" json:"appId,omitempty"`
	ClassId     string `protobuf:"bytes,50,opt,name=classId,proto3" json:"classId,omitempty"`
	Source      string `protobuf:"bytes,60,opt,name=source,proto3" json:"source,omitempty"`
	UserId      string `protobuf:"bytes,70,opt,name=userId,proto3" json:"userId,omitempty"`
	Owner       string `protobuf:"bytes,80,opt,name=owner,proto3" json:"owner,omitempty"`
	Type        string `protobuf:"bytes,90,opt,name=type,proto3" json:"type,omitempty"`
	CreateTime  string `protobuf:"bytes,100,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  string `protobuf:"bytes,110,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{37}
}

func (x *Tag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tag) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Tag) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *Tag) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tag) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Tag) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Tag) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Tag) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Tag) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type AddInstanceScopeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string            `protobuf:"bytes,10,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	ScopeIdMap map[string]string `protobuf:"bytes,20,rep,name=scopeIdMap,proto3" json:"scopeIdMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddInstanceScopeIdRequest) Reset() {
	*x = AddInstanceScopeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInstanceScopeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInstanceScopeIdRequest) ProtoMessage() {}

func (x *AddInstanceScopeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInstanceScopeIdRequest.ProtoReflect.Descriptor instead.
func (*AddInstanceScopeIdRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{38}
}

func (x *AddInstanceScopeIdRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AddInstanceScopeIdRequest) GetScopeIdMap() map[string]string {
	if x != nil {
		return x.ScopeIdMap
	}
	return nil
}

type AddInstanceScopeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddInstanceScopeIdResponse) Reset() {
	*x = AddInstanceScopeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInstanceScopeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInstanceScopeIdResponse) ProtoMessage() {}

func (x *AddInstanceScopeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInstanceScopeIdResponse.ProtoReflect.Descriptor instead.
func (*AddInstanceScopeIdResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{39}
}

func (x *AddInstanceScopeIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddInstanceScopeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteInstanceScopeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,10,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *DeleteInstanceScopeIdRequest) Reset() {
	*x = DeleteInstanceScopeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceScopeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceScopeIdRequest) ProtoMessage() {}

func (x *DeleteInstanceScopeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceScopeIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceScopeIdRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteInstanceScopeIdRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type DeleteInstanceScopeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteInstanceScopeIdResponse) Reset() {
	*x = DeleteInstanceScopeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceScopeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceScopeIdResponse) ProtoMessage() {}

func (x *DeleteInstanceScopeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceScopeIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceScopeIdResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteInstanceScopeIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteInstanceScopeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetInstanceScopeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,10,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *GetInstanceScopeIdRequest) Reset() {
	*x = GetInstanceScopeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceScopeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceScopeIdRequest) ProtoMessage() {}

func (x *GetInstanceScopeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceScopeIdRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceScopeIdRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{42}
}

func (x *GetInstanceScopeIdRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type GetInstanceScopeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message         string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	InstanceScopeId *InstanceScopeId `protobuf:"bytes,3,opt,name=InstanceScopeId,proto3" json:"InstanceScopeId,omitempty"`
}

func (x *GetInstanceScopeIdResponse) Reset() {
	*x = GetInstanceScopeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceScopeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceScopeIdResponse) ProtoMessage() {}

func (x *GetInstanceScopeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceScopeIdResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceScopeIdResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{43}
}

func (x *GetInstanceScopeIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetInstanceScopeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetInstanceScopeIdResponse) GetInstanceScopeId() *InstanceScopeId {
	if x != nil {
		return x.InstanceScopeId
	}
	return nil
}

type InstanceScopeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string            `protobuf:"bytes,10,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	ScopeIdMap map[string]string `protobuf:"bytes,20,rep,name=scopeIdMap,proto3" json:"scopeIdMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InstanceScopeId) Reset() {
	*x = InstanceScopeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceScopeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceScopeId) ProtoMessage() {}

func (x *InstanceScopeId) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceScopeId.ProtoReflect.Descriptor instead.
func (*InstanceScopeId) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{44}
}

func (x *InstanceScopeId) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceScopeId) GetScopeIdMap() map[string]string {
	if x != nil {
		return x.ScopeIdMap
	}
	return nil
}

type QueryInstanceScopeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryInstanceScopeIdRequest) Reset() {
	*x = QueryInstanceScopeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstanceScopeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstanceScopeIdRequest) ProtoMessage() {}

func (x *QueryInstanceScopeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstanceScopeIdRequest.ProtoReflect.Descriptor instead.
func (*QueryInstanceScopeIdRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{45}
}

type QueryInstanceScopeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message          string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	InstanceScopeIds []*InstanceScopeId `protobuf:"bytes,3,rep,name=InstanceScopeIds,proto3" json:"InstanceScopeIds,omitempty"`
}

func (x *QueryInstanceScopeIdResponse) Reset() {
	*x = QueryInstanceScopeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstanceScopeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstanceScopeIdResponse) ProtoMessage() {}

func (x *QueryInstanceScopeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstanceScopeIdResponse.ProtoReflect.Descriptor instead.
func (*QueryInstanceScopeIdResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{46}
}

func (x *QueryInstanceScopeIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryInstanceScopeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryInstanceScopeIdResponse) GetInstanceScopeIds() []*InstanceScopeId {
	if x != nil {
		return x.InstanceScopeIds
	}
	return nil
}

type UpdateInstanceScopeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string            `protobuf:"bytes,10,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	ScopeIdMap map[string]string `protobuf:"bytes,20,rep,name=scopeIdMap,proto3" json:"scopeIdMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateInstanceScopeIdRequest) Reset() {
	*x = UpdateInstanceScopeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceScopeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceScopeIdRequest) ProtoMessage() {}

func (x *UpdateInstanceScopeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceScopeIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceScopeIdRequest) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateInstanceScopeIdRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateInstanceScopeIdRequest) GetScopeIdMap() map[string]string {
	if x != nil {
		return x.ScopeIdMap
	}
	return nil
}

type UpdateInstanceScopeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateInstanceScopeIdResponse) Reset() {
	*x = UpdateInstanceScopeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AssetLibraryService_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceScopeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceScopeIdResponse) ProtoMessage() {}

func (x *UpdateInstanceScopeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AssetLibraryService_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceScopeIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceScopeIdResponse) Descriptor() ([]byte, []int) {
	return file_AssetLibraryService_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateInstanceScopeIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateInstanceScopeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_AssetLibraryService_proto protoreflect.FileDescriptor

var file_AssetLibraryService_proto_rawDesc = []byte{
	0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d,
	0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x01, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf6, 0x02,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a,
	0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x28, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x50, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x65, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x22, 0xbc, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x69, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x65, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x66,
	0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x04, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x66,
	0x72, 0x6f, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x22, 0x43, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x65, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x32, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x75, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x22, 0xbf, 0x03, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0xf4, 0x06, 0x0a, 0x05, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x67, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x12, 0x32, 0x0a, 0x14, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x54, 0x0a, 0x0d, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc0, 0x05, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x28, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x96, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x54,
	0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x02, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x58, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x14, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xde, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a,
	0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x54, 0x0a, 0x0d,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x43, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6a, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x22, 0xa5,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf2, 0x01,
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a,
	0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x6f, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x73, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x95, 0x02, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xdd, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a,
	0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x70,
	0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4a, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x1c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x4d, 0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x53, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x52, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x3d, 0x0a,
	0x0f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x98, 0x13, 0x0a, 0x13,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x69,
	0x76, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a,
	0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78,
	0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78,
	0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69,
	0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69,
	0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a,
	0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69,
	0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67, 0x12, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69,
	0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7d, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78,
	0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x86, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69,
	0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1f, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69,
	0x78, 0x65, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x50, 0x01, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_AssetLibraryService_proto_rawDescOnce sync.Once
	file_AssetLibraryService_proto_rawDescData = file_AssetLibraryService_proto_rawDesc
)

func file_AssetLibraryService_proto_rawDescGZIP() []byte {
	file_AssetLibraryService_proto_rawDescOnce.Do(func() {
		file_AssetLibraryService_proto_rawDescData = protoimpl.X.CompressGZIP(file_AssetLibraryService_proto_rawDescData)
	})
	return file_AssetLibraryService_proto_rawDescData
}

var file_AssetLibraryService_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_AssetLibraryService_proto_goTypes = []interface{}{
	(*CommonRequest)(nil),                 // 0: com.zixel.file.backend.CommonRequest
	(*AddClassRequest)(nil),               // 1: com.zixel.file.backend.AddClassRequest
	(*AddClassResponse)(nil),              // 2: com.zixel.file.backend.AddClassResponse
	(*UpdateClassRequest)(nil),            // 3: com.zixel.file.backend.UpdateClassRequest
	(*UpdateClassResponse)(nil),           // 4: com.zixel.file.backend.UpdateClassResponse
	(*DeleteClassRequest)(nil),            // 5: com.zixel.file.backend.DeleteClassRequest
	(*DeleteClassResponse)(nil),           // 6: com.zixel.file.backend.DeleteClassResponse
	(*QueryClassRequest)(nil),             // 7: com.zixel.file.backend.QueryClassRequest
	(*QueryClassResponse)(nil),            // 8: com.zixel.file.backend.QueryClassResponse
	(*Class)(nil),                         // 9: com.zixel.file.backend.Class
	(*GetClassRequest)(nil),               // 10: com.zixel.file.backend.GetClassRequest
	(*GetClassResponse)(nil),              // 11: com.zixel.file.backend.GetClassResponse
	(*QueryAssetPageRequest)(nil),         // 12: com.zixel.file.backend.QueryAssetPageRequest
	(*QueryAssetPageResponse)(nil),        // 13: com.zixel.file.backend.QueryAssetPageResponse
	(*Asset)(nil),                         // 14: com.zixel.file.backend.Asset
	(*AddAssetRequest)(nil),               // 15: com.zixel.file.backend.AddAssetRequest
	(*AddAssetResponse)(nil),              // 16: com.zixel.file.backend.AddAssetResponse
	(*AssetUploadedRequest)(nil),          // 17: com.zixel.file.backend.AssetUploadedRequest
	(*AssetUploadedResponse)(nil),         // 18: com.zixel.file.backend.AssetUploadedResponse
	(*UpdateAssetRequest)(nil),            // 19: com.zixel.file.backend.UpdateAssetRequest
	(*UpdateAssetResponse)(nil),           // 20: com.zixel.file.backend.UpdateAssetResponse
	(*DeleteAssetRequest)(nil),            // 21: com.zixel.file.backend.DeleteAssetRequest
	(*DeleteAssetResponse)(nil),           // 22: com.zixel.file.backend.DeleteAssetResponse
	(*GetAssetRequest)(nil),               // 23: com.zixel.file.backend.GetAssetRequest
	(*GetAssetResponse)(nil),              // 24: com.zixel.file.backend.GetAssetResponse
	(*UpdateAssetThumbnailRequest)(nil),   // 25: com.zixel.file.backend.UpdateAssetThumbnailRequest
	(*UpdateAssetThumbnailResponse)(nil),  // 26: com.zixel.file.backend.UpdateAssetThumbnailResponse
	(*AddTagRequest)(nil),                 // 27: com.zixel.file.backend.AddTagRequest
	(*AddTagResponse)(nil),                // 28: com.zixel.file.backend.AddTagResponse
	(*UpdateTagRequest)(nil),              // 29: com.zixel.file.backend.UpdateTagRequest
	(*UpdateTagResponse)(nil),             // 30: com.zixel.file.backend.UpdateTagResponse
	(*DeleteTagRequest)(nil),              // 31: com.zixel.file.backend.DeleteTagRequest
	(*DeleteTagResponse)(nil),             // 32: com.zixel.file.backend.DeleteTagResponse
	(*QueryTagRequest)(nil),               // 33: com.zixel.file.backend.QueryTagRequest
	(*QueryTagResponse)(nil),              // 34: com.zixel.file.backend.QueryTagResponse
	(*QueryTagListRequest)(nil),           // 35: com.zixel.file.backend.QueryTagListRequest
	(*QueryTagListResponse)(nil),          // 36: com.zixel.file.backend.QueryTagListResponse
	(*Tag)(nil),                           // 37: com.zixel.file.backend.Tag
	(*AddInstanceScopeIdRequest)(nil),     // 38: com.zixel.file.backend.AddInstanceScopeIdRequest
	(*AddInstanceScopeIdResponse)(nil),    // 39: com.zixel.file.backend.AddInstanceScopeIdResponse
	(*DeleteInstanceScopeIdRequest)(nil),  // 40: com.zixel.file.backend.DeleteInstanceScopeIdRequest
	(*DeleteInstanceScopeIdResponse)(nil), // 41: com.zixel.file.backend.DeleteInstanceScopeIdResponse
	(*GetInstanceScopeIdRequest)(nil),     // 42: com.zixel.file.backend.GetInstanceScopeIdRequest
	(*GetInstanceScopeIdResponse)(nil),    // 43: com.zixel.file.backend.GetInstanceScopeIdResponse
	(*InstanceScopeId)(nil),               // 44: com.zixel.file.backend.InstanceScopeId
	(*QueryInstanceScopeIdRequest)(nil),   // 45: com.zixel.file.backend.QueryInstanceScopeIdRequest
	(*QueryInstanceScopeIdResponse)(nil),  // 46: com.zixel.file.backend.QueryInstanceScopeIdResponse
	(*UpdateInstanceScopeIdRequest)(nil),  // 47: com.zixel.file.backend.UpdateInstanceScopeIdRequest
	(*UpdateInstanceScopeIdResponse)(nil), // 48: com.zixel.file.backend.UpdateInstanceScopeIdResponse
	nil,                                   // 49: com.zixel.file.backend.Asset.ExternalEntry
	nil,                                   // 50: com.zixel.file.backend.AddAssetRequest.ExternalEntry
	nil,                                   // 51: com.zixel.file.backend.AddAssetResponse.OtherFilesEntry
	nil,                                   // 52: com.zixel.file.backend.UpdateAssetRequest.ExternalEntry
	nil,                                   // 53: com.zixel.file.backend.AddInstanceScopeIdRequest.ScopeIdMapEntry
	nil,                                   // 54: com.zixel.file.backend.InstanceScopeId.ScopeIdMapEntry
	nil,                                   // 55: com.zixel.file.backend.UpdateInstanceScopeIdRequest.ScopeIdMapEntry
	(*anypb.Any)(nil),                     // 56: google.protobuf.Any
	(*structpb.Struct)(nil),               // 57: google.protobuf.Struct
}
var file_AssetLibraryService_proto_depIdxs = []int32{
	0,  // 0: com.zixel.file.backend.AddClassRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	56, // 1: com.zixel.file.backend.AddClassRequest.pipelines:type_name -> google.protobuf.Any
	0,  // 2: com.zixel.file.backend.UpdateClassRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	56, // 3: com.zixel.file.backend.UpdateClassRequest.pipelines:type_name -> google.protobuf.Any
	0,  // 4: com.zixel.file.backend.DeleteClassRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	0,  // 5: com.zixel.file.backend.QueryClassRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	9,  // 6: com.zixel.file.backend.QueryClassResponse.classes:type_name -> com.zixel.file.backend.Class
	56, // 7: com.zixel.file.backend.Class.pipelines:type_name -> google.protobuf.Any
	0,  // 8: com.zixel.file.backend.GetClassRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	9,  // 9: com.zixel.file.backend.GetClassResponse.class:type_name -> com.zixel.file.backend.Class
	14, // 10: com.zixel.file.backend.QueryAssetPageResponse.Asset:type_name -> com.zixel.file.backend.Asset
	49, // 11: com.zixel.file.backend.Asset.External:type_name -> com.zixel.file.backend.Asset.ExternalEntry
	50, // 12: com.zixel.file.backend.AddAssetRequest.External:type_name -> com.zixel.file.backend.AddAssetRequest.ExternalEntry
	51, // 13: com.zixel.file.backend.AddAssetResponse.OtherFiles:type_name -> com.zixel.file.backend.AddAssetResponse.OtherFilesEntry
	52, // 14: com.zixel.file.backend.UpdateAssetRequest.External:type_name -> com.zixel.file.backend.UpdateAssetRequest.ExternalEntry
	0,  // 15: com.zixel.file.backend.DeleteAssetRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	0,  // 16: com.zixel.file.backend.GetAssetRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	14, // 17: com.zixel.file.backend.GetAssetResponse.asset:type_name -> com.zixel.file.backend.Asset
	0,  // 18: com.zixel.file.backend.UpdateAssetThumbnailRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	0,  // 19: com.zixel.file.backend.AddTagRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	0,  // 20: com.zixel.file.backend.UpdateTagRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	0,  // 21: com.zixel.file.backend.DeleteTagRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	0,  // 22: com.zixel.file.backend.QueryTagRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	37, // 23: com.zixel.file.backend.QueryTagResponse.tag:type_name -> com.zixel.file.backend.Tag
	0,  // 24: com.zixel.file.backend.QueryTagListRequest.commonRequest:type_name -> com.zixel.file.backend.CommonRequest
	37, // 25: com.zixel.file.backend.QueryTagListResponse.tag:type_name -> com.zixel.file.backend.Tag
	53, // 26: com.zixel.file.backend.AddInstanceScopeIdRequest.scopeIdMap:type_name -> com.zixel.file.backend.AddInstanceScopeIdRequest.ScopeIdMapEntry
	44, // 27: com.zixel.file.backend.GetInstanceScopeIdResponse.InstanceScopeId:type_name -> com.zixel.file.backend.InstanceScopeId
	54, // 28: com.zixel.file.backend.InstanceScopeId.scopeIdMap:type_name -> com.zixel.file.backend.InstanceScopeId.ScopeIdMapEntry
	44, // 29: com.zixel.file.backend.QueryInstanceScopeIdResponse.InstanceScopeIds:type_name -> com.zixel.file.backend.InstanceScopeId
	55, // 30: com.zixel.file.backend.UpdateInstanceScopeIdRequest.scopeIdMap:type_name -> com.zixel.file.backend.UpdateInstanceScopeIdRequest.ScopeIdMapEntry
	57, // 31: com.zixel.file.backend.Asset.ExternalEntry.value:type_name -> google.protobuf.Struct
	57, // 32: com.zixel.file.backend.AddAssetRequest.ExternalEntry.value:type_name -> google.protobuf.Struct
	57, // 33: com.zixel.file.backend.UpdateAssetRequest.ExternalEntry.value:type_name -> google.protobuf.Struct
	12, // 34: com.zixel.file.backend.AssetLibrarySerivce.QueryAssetPage:input_type -> com.zixel.file.backend.QueryAssetPageRequest
	15, // 35: com.zixel.file.backend.AssetLibrarySerivce.AddAsset:input_type -> com.zixel.file.backend.AddAssetRequest
	17, // 36: com.zixel.file.backend.AssetLibrarySerivce.AssetUploaded:input_type -> com.zixel.file.backend.AssetUploadedRequest
	19, // 37: com.zixel.file.backend.AssetLibrarySerivce.UpdateAsset:input_type -> com.zixel.file.backend.UpdateAssetRequest
	21, // 38: com.zixel.file.backend.AssetLibrarySerivce.DeleteAsset:input_type -> com.zixel.file.backend.DeleteAssetRequest
	23, // 39: com.zixel.file.backend.AssetLibrarySerivce.GetAsset:input_type -> com.zixel.file.backend.GetAssetRequest
	25, // 40: com.zixel.file.backend.AssetLibrarySerivce.UpdateAssetThumbnail:input_type -> com.zixel.file.backend.UpdateAssetThumbnailRequest
	1,  // 41: com.zixel.file.backend.AssetLibrarySerivce.AddClass:input_type -> com.zixel.file.backend.AddClassRequest
	3,  // 42: com.zixel.file.backend.AssetLibrarySerivce.UpdateClass:input_type -> com.zixel.file.backend.UpdateClassRequest
	5,  // 43: com.zixel.file.backend.AssetLibrarySerivce.DeleteClass:input_type -> com.zixel.file.backend.DeleteClassRequest
	7,  // 44: com.zixel.file.backend.AssetLibrarySerivce.QueryClass:input_type -> com.zixel.file.backend.QueryClassRequest
	10, // 45: com.zixel.file.backend.AssetLibrarySerivce.GetClass:input_type -> com.zixel.file.backend.GetClassRequest
	27, // 46: com.zixel.file.backend.AssetLibrarySerivce.AddTag:input_type -> com.zixel.file.backend.AddTagRequest
	29, // 47: com.zixel.file.backend.AssetLibrarySerivce.UpdateTag:input_type -> com.zixel.file.backend.UpdateTagRequest
	31, // 48: com.zixel.file.backend.AssetLibrarySerivce.DeleteTag:input_type -> com.zixel.file.backend.DeleteTagRequest
	33, // 49: com.zixel.file.backend.AssetLibrarySerivce.QueryTag:input_type -> com.zixel.file.backend.QueryTagRequest
	35, // 50: com.zixel.file.backend.AssetLibrarySerivce.QueryTagList:input_type -> com.zixel.file.backend.QueryTagListRequest
	38, // 51: com.zixel.file.backend.AssetLibrarySerivce.AddInstanceScopeId:input_type -> com.zixel.file.backend.AddInstanceScopeIdRequest
	40, // 52: com.zixel.file.backend.AssetLibrarySerivce.DeleteInstanceScopeId:input_type -> com.zixel.file.backend.DeleteInstanceScopeIdRequest
	42, // 53: com.zixel.file.backend.AssetLibrarySerivce.GetInstanceScopeId:input_type -> com.zixel.file.backend.GetInstanceScopeIdRequest
	45, // 54: com.zixel.file.backend.AssetLibrarySerivce.QueryInstanceScopeId:input_type -> com.zixel.file.backend.QueryInstanceScopeIdRequest
	47, // 55: com.zixel.file.backend.AssetLibrarySerivce.UpdateInstanceScopeId:input_type -> com.zixel.file.backend.UpdateInstanceScopeIdRequest
	13, // 56: com.zixel.file.backend.AssetLibrarySerivce.QueryAssetPage:output_type -> com.zixel.file.backend.QueryAssetPageResponse
	16, // 57: com.zixel.file.backend.AssetLibrarySerivce.AddAsset:output_type -> com.zixel.file.backend.AddAssetResponse
	18, // 58: com.zixel.file.backend.AssetLibrarySerivce.AssetUploaded:output_type -> com.zixel.file.backend.AssetUploadedResponse
	20, // 59: com.zixel.file.backend.AssetLibrarySerivce.UpdateAsset:output_type -> com.zixel.file.backend.UpdateAssetResponse
	22, // 60: com.zixel.file.backend.AssetLibrarySerivce.DeleteAsset:output_type -> com.zixel.file.backend.DeleteAssetResponse
	24, // 61: com.zixel.file.backend.AssetLibrarySerivce.GetAsset:output_type -> com.zixel.file.backend.GetAssetResponse
	26, // 62: com.zixel.file.backend.AssetLibrarySerivce.UpdateAssetThumbnail:output_type -> com.zixel.file.backend.UpdateAssetThumbnailResponse
	2,  // 63: com.zixel.file.backend.AssetLibrarySerivce.AddClass:output_type -> com.zixel.file.backend.AddClassResponse
	4,  // 64: com.zixel.file.backend.AssetLibrarySerivce.UpdateClass:output_type -> com.zixel.file.backend.UpdateClassResponse
	6,  // 65: com.zixel.file.backend.AssetLibrarySerivce.DeleteClass:output_type -> com.zixel.file.backend.DeleteClassResponse
	8,  // 66: com.zixel.file.backend.AssetLibrarySerivce.QueryClass:output_type -> com.zixel.file.backend.QueryClassResponse
	11, // 67: com.zixel.file.backend.AssetLibrarySerivce.GetClass:output_type -> com.zixel.file.backend.GetClassResponse
	28, // 68: com.zixel.file.backend.AssetLibrarySerivce.AddTag:output_type -> com.zixel.file.backend.AddTagResponse
	30, // 69: com.zixel.file.backend.AssetLibrarySerivce.UpdateTag:output_type -> com.zixel.file.backend.UpdateTagResponse
	32, // 70: com.zixel.file.backend.AssetLibrarySerivce.DeleteTag:output_type -> com.zixel.file.backend.DeleteTagResponse
	34, // 71: com.zixel.file.backend.AssetLibrarySerivce.QueryTag:output_type -> com.zixel.file.backend.QueryTagResponse
	36, // 72: com.zixel.file.backend.AssetLibrarySerivce.QueryTagList:output_type -> com.zixel.file.backend.QueryTagListResponse
	39, // 73: com.zixel.file.backend.AssetLibrarySerivce.AddInstanceScopeId:output_type -> com.zixel.file.backend.AddInstanceScopeIdResponse
	41, // 74: com.zixel.file.backend.AssetLibrarySerivce.DeleteInstanceScopeId:output_type -> com.zixel.file.backend.DeleteInstanceScopeIdResponse
	43, // 75: com.zixel.file.backend.AssetLibrarySerivce.GetInstanceScopeId:output_type -> com.zixel.file.backend.GetInstanceScopeIdResponse
	46, // 76: com.zixel.file.backend.AssetLibrarySerivce.QueryInstanceScopeId:output_type -> com.zixel.file.backend.QueryInstanceScopeIdResponse
	48, // 77: com.zixel.file.backend.AssetLibrarySerivce.UpdateInstanceScopeId:output_type -> com.zixel.file.backend.UpdateInstanceScopeIdResponse
	56, // [56:78] is the sub-list for method output_type
	34, // [34:56] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_AssetLibraryService_proto_init() }
func file_AssetLibraryService_proto_init() {
	if File_AssetLibraryService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_AssetLibraryService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Class); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAssetPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAssetPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetUploadedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetUploadedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetThumbnailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetThumbnailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTagListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTagListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInstanceScopeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInstanceScopeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceScopeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceScopeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceScopeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceScopeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceScopeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstanceScopeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstanceScopeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceScopeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AssetLibraryService_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceScopeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_AssetLibraryService_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_AssetLibraryService_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_AssetLibraryService_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_AssetLibraryService_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AssetLibraryService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_AssetLibraryService_proto_goTypes,
		DependencyIndexes: file_AssetLibraryService_proto_depIdxs,
		MessageInfos:      file_AssetLibraryService_proto_msgTypes,
	}.Build()
	File_AssetLibraryService_proto = out.File
	file_AssetLibraryService_proto_rawDesc = nil
	file_AssetLibraryService_proto_goTypes = nil
	file_AssetLibraryService_proto_depIdxs = nil
}
