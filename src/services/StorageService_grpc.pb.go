// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: StorageService.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileManagerServiceClient is the client API for FileManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagerServiceClient interface {
	// 获取下载地址
	GetDownLoadSignUrl(ctx context.Context, in *DownLoadSignUrlRequest, opts ...grpc.CallOption) (*UrlReply, error)
	// 获取上传地址
	GetUploadFileUrl(ctx context.Context, in *UploadFileUrlRequest, opts ...grpc.CallOption) (*UrlReply, error)
	// 获取文件大小地址
	GetObjectSize(ctx context.Context, in *ObjectSizeRequest, opts ...grpc.CallOption) (*ObjectSizeReply, error)
	// 创建文件记录
	CreateMetaData(ctx context.Context, in *ObjectMetaDataRequest, opts ...grpc.CallOption) (*MetaDataReply, error)
	// 查询文件历史
	QueryHistoryMetas(ctx context.Context, in *MetaDataRequest, opts ...grpc.CallOption) (*MetaDataListReply, error)
	// 复制对象
	CopyObject(ctx context.Context, in *CopyObjectRequest, opts ...grpc.CallOption) (*CopyObjectReply, error)
	PutObjectWithBytes(ctx context.Context, in *C2S_PutObjectWithBytesReq, opts ...grpc.CallOption) (*C2S_PutObjectWithBytesRpn, error)
	PutObjectWithBytesStream(ctx context.Context, opts ...grpc.CallOption) (FileManagerService_PutObjectWithBytesStreamClient, error)
	GetScopeInfo(ctx context.Context, in *C2S_GetScopeInfoReq, opts ...grpc.CallOption) (*C2S_GetScopeInfoRpn, error)
	ListObjects(ctx context.Context, in *C2S_ListObjectsReqT, opts ...grpc.CallOption) (*C2S_ListObjectsRpnT, error)
}

type fileManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagerServiceClient(cc grpc.ClientConnInterface) FileManagerServiceClient {
	return &fileManagerServiceClient{cc}
}

func (c *fileManagerServiceClient) GetDownLoadSignUrl(ctx context.Context, in *DownLoadSignUrlRequest, opts ...grpc.CallOption) (*UrlReply, error) {
	out := new(UrlReply)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/GetDownLoadSignUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) GetUploadFileUrl(ctx context.Context, in *UploadFileUrlRequest, opts ...grpc.CallOption) (*UrlReply, error) {
	out := new(UrlReply)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/GetUploadFileUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) GetObjectSize(ctx context.Context, in *ObjectSizeRequest, opts ...grpc.CallOption) (*ObjectSizeReply, error) {
	out := new(ObjectSizeReply)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/GetObjectSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) CreateMetaData(ctx context.Context, in *ObjectMetaDataRequest, opts ...grpc.CallOption) (*MetaDataReply, error) {
	out := new(MetaDataReply)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/createMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) QueryHistoryMetas(ctx context.Context, in *MetaDataRequest, opts ...grpc.CallOption) (*MetaDataListReply, error) {
	out := new(MetaDataListReply)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/queryHistoryMetas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) CopyObject(ctx context.Context, in *CopyObjectRequest, opts ...grpc.CallOption) (*CopyObjectReply, error) {
	out := new(CopyObjectReply)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/copyObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) PutObjectWithBytes(ctx context.Context, in *C2S_PutObjectWithBytesReq, opts ...grpc.CallOption) (*C2S_PutObjectWithBytesRpn, error) {
	out := new(C2S_PutObjectWithBytesRpn)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/putObjectWithBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) PutObjectWithBytesStream(ctx context.Context, opts ...grpc.CallOption) (FileManagerService_PutObjectWithBytesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileManagerService_ServiceDesc.Streams[0], "/com.zixel.file.backend.FileManagerService/putObjectWithBytesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileManagerServicePutObjectWithBytesStreamClient{stream}
	return x, nil
}

type FileManagerService_PutObjectWithBytesStreamClient interface {
	Send(*C2S_PutObjectWithBytesReq) error
	CloseAndRecv() (*C2S_PutObjectWithBytesRpn, error)
	grpc.ClientStream
}

type fileManagerServicePutObjectWithBytesStreamClient struct {
	grpc.ClientStream
}

func (x *fileManagerServicePutObjectWithBytesStreamClient) Send(m *C2S_PutObjectWithBytesReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileManagerServicePutObjectWithBytesStreamClient) CloseAndRecv() (*C2S_PutObjectWithBytesRpn, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(C2S_PutObjectWithBytesRpn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileManagerServiceClient) GetScopeInfo(ctx context.Context, in *C2S_GetScopeInfoReq, opts ...grpc.CallOption) (*C2S_GetScopeInfoRpn, error) {
	out := new(C2S_GetScopeInfoRpn)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/getScopeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) ListObjects(ctx context.Context, in *C2S_ListObjectsReqT, opts ...grpc.CallOption) (*C2S_ListObjectsRpnT, error) {
	out := new(C2S_ListObjectsRpnT)
	err := c.cc.Invoke(ctx, "/com.zixel.file.backend.FileManagerService/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagerServiceServer is the server API for FileManagerService service.
// All implementations must embed UnimplementedFileManagerServiceServer
// for forward compatibility
type FileManagerServiceServer interface {
	// 获取下载地址
	GetDownLoadSignUrl(context.Context, *DownLoadSignUrlRequest) (*UrlReply, error)
	// 获取上传地址
	GetUploadFileUrl(context.Context, *UploadFileUrlRequest) (*UrlReply, error)
	// 获取文件大小地址
	GetObjectSize(context.Context, *ObjectSizeRequest) (*ObjectSizeReply, error)
	// 创建文件记录
	CreateMetaData(context.Context, *ObjectMetaDataRequest) (*MetaDataReply, error)
	// 查询文件历史
	QueryHistoryMetas(context.Context, *MetaDataRequest) (*MetaDataListReply, error)
	// 复制对象
	CopyObject(context.Context, *CopyObjectRequest) (*CopyObjectReply, error)
	PutObjectWithBytes(context.Context, *C2S_PutObjectWithBytesReq) (*C2S_PutObjectWithBytesRpn, error)
	PutObjectWithBytesStream(FileManagerService_PutObjectWithBytesStreamServer) error
	GetScopeInfo(context.Context, *C2S_GetScopeInfoReq) (*C2S_GetScopeInfoRpn, error)
	ListObjects(context.Context, *C2S_ListObjectsReqT) (*C2S_ListObjectsRpnT, error)
	mustEmbedUnimplementedFileManagerServiceServer()
}

// UnimplementedFileManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileManagerServiceServer struct {
}

func (UnimplementedFileManagerServiceServer) GetDownLoadSignUrl(context.Context, *DownLoadSignUrlRequest) (*UrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownLoadSignUrl not implemented")
}
func (UnimplementedFileManagerServiceServer) GetUploadFileUrl(context.Context, *UploadFileUrlRequest) (*UrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadFileUrl not implemented")
}
func (UnimplementedFileManagerServiceServer) GetObjectSize(context.Context, *ObjectSizeRequest) (*ObjectSizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectSize not implemented")
}
func (UnimplementedFileManagerServiceServer) CreateMetaData(context.Context, *ObjectMetaDataRequest) (*MetaDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetaData not implemented")
}
func (UnimplementedFileManagerServiceServer) QueryHistoryMetas(context.Context, *MetaDataRequest) (*MetaDataListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHistoryMetas not implemented")
}
func (UnimplementedFileManagerServiceServer) CopyObject(context.Context, *CopyObjectRequest) (*CopyObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (UnimplementedFileManagerServiceServer) PutObjectWithBytes(context.Context, *C2S_PutObjectWithBytesReq) (*C2S_PutObjectWithBytesRpn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObjectWithBytes not implemented")
}
func (UnimplementedFileManagerServiceServer) PutObjectWithBytesStream(FileManagerService_PutObjectWithBytesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutObjectWithBytesStream not implemented")
}
func (UnimplementedFileManagerServiceServer) GetScopeInfo(context.Context, *C2S_GetScopeInfoReq) (*C2S_GetScopeInfoRpn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopeInfo not implemented")
}
func (UnimplementedFileManagerServiceServer) ListObjects(context.Context, *C2S_ListObjectsReqT) (*C2S_ListObjectsRpnT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedFileManagerServiceServer) mustEmbedUnimplementedFileManagerServiceServer() {}

// UnsafeFileManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagerServiceServer will
// result in compilation errors.
type UnsafeFileManagerServiceServer interface {
	mustEmbedUnimplementedFileManagerServiceServer()
}

func RegisterFileManagerServiceServer(s grpc.ServiceRegistrar, srv FileManagerServiceServer) {
	s.RegisterService(&FileManagerService_ServiceDesc, srv)
}

func _FileManagerService_GetDownLoadSignUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownLoadSignUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).GetDownLoadSignUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/GetDownLoadSignUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).GetDownLoadSignUrl(ctx, req.(*DownLoadSignUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_GetUploadFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).GetUploadFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/GetUploadFileUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).GetUploadFileUrl(ctx, req.(*UploadFileUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_GetObjectSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).GetObjectSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/GetObjectSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).GetObjectSize(ctx, req.(*ObjectSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_CreateMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).CreateMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/createMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).CreateMetaData(ctx, req.(*ObjectMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_QueryHistoryMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).QueryHistoryMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/queryHistoryMetas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).QueryHistoryMetas(ctx, req.(*MetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_CopyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).CopyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/copyObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).CopyObject(ctx, req.(*CopyObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_PutObjectWithBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_PutObjectWithBytesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).PutObjectWithBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/putObjectWithBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).PutObjectWithBytes(ctx, req.(*C2S_PutObjectWithBytesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_PutObjectWithBytesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileManagerServiceServer).PutObjectWithBytesStream(&fileManagerServicePutObjectWithBytesStreamServer{stream})
}

type FileManagerService_PutObjectWithBytesStreamServer interface {
	SendAndClose(*C2S_PutObjectWithBytesRpn) error
	Recv() (*C2S_PutObjectWithBytesReq, error)
	grpc.ServerStream
}

type fileManagerServicePutObjectWithBytesStreamServer struct {
	grpc.ServerStream
}

func (x *fileManagerServicePutObjectWithBytesStreamServer) SendAndClose(m *C2S_PutObjectWithBytesRpn) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileManagerServicePutObjectWithBytesStreamServer) Recv() (*C2S_PutObjectWithBytesReq, error) {
	m := new(C2S_PutObjectWithBytesReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileManagerService_GetScopeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_GetScopeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).GetScopeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/getScopeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).GetScopeInfo(ctx, req.(*C2S_GetScopeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_ListObjectsReqT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.zixel.file.backend.FileManagerService/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).ListObjects(ctx, req.(*C2S_ListObjectsReqT))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManagerService_ServiceDesc is the grpc.ServiceDesc for FileManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.zixel.file.backend.FileManagerService",
	HandlerType: (*FileManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDownLoadSignUrl",
			Handler:    _FileManagerService_GetDownLoadSignUrl_Handler,
		},
		{
			MethodName: "GetUploadFileUrl",
			Handler:    _FileManagerService_GetUploadFileUrl_Handler,
		},
		{
			MethodName: "GetObjectSize",
			Handler:    _FileManagerService_GetObjectSize_Handler,
		},
		{
			MethodName: "createMetaData",
			Handler:    _FileManagerService_CreateMetaData_Handler,
		},
		{
			MethodName: "queryHistoryMetas",
			Handler:    _FileManagerService_QueryHistoryMetas_Handler,
		},
		{
			MethodName: "copyObject",
			Handler:    _FileManagerService_CopyObject_Handler,
		},
		{
			MethodName: "putObjectWithBytes",
			Handler:    _FileManagerService_PutObjectWithBytes_Handler,
		},
		{
			MethodName: "getScopeInfo",
			Handler:    _FileManagerService_GetScopeInfo_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _FileManagerService_ListObjects_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "putObjectWithBytesStream",
			Handler:       _FileManagerService_PutObjectWithBytesStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "StorageService.proto",
}
