// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: OrgMagService.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type C2S_QueryCompanyReqT_CompanySourceEnum int32

const (
	C2S_QueryCompanyReqT_NULL_CompanySourceEnum C2S_QueryCompanyReqT_CompanySourceEnum = 0
	C2S_QueryCompanyReqT_FEI_SHU                C2S_QueryCompanyReqT_CompanySourceEnum = 10
	C2S_QueryCompanyReqT_WEB                    C2S_QueryCompanyReqT_CompanySourceEnum = 20
)

// Enum value maps for C2S_QueryCompanyReqT_CompanySourceEnum.
var (
	C2S_QueryCompanyReqT_CompanySourceEnum_name = map[int32]string{
		0:  "NULL_CompanySourceEnum",
		10: "FEI_SHU",
		20: "WEB",
	}
	C2S_QueryCompanyReqT_CompanySourceEnum_value = map[string]int32{
		"NULL_CompanySourceEnum": 0,
		"FEI_SHU":                10,
		"WEB":                    20,
	}
)

func (x C2S_QueryCompanyReqT_CompanySourceEnum) Enum() *C2S_QueryCompanyReqT_CompanySourceEnum {
	p := new(C2S_QueryCompanyReqT_CompanySourceEnum)
	*p = x
	return p
}

func (x C2S_QueryCompanyReqT_CompanySourceEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (C2S_QueryCompanyReqT_CompanySourceEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_OrgMagService_proto_enumTypes[0].Descriptor()
}

func (C2S_QueryCompanyReqT_CompanySourceEnum) Type() protoreflect.EnumType {
	return &file_OrgMagService_proto_enumTypes[0]
}

func (x C2S_QueryCompanyReqT_CompanySourceEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use C2S_QueryCompanyReqT_CompanySourceEnum.Descriptor instead.
func (C2S_QueryCompanyReqT_CompanySourceEnum) EnumDescriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{26, 0}
}

type C2S_QueryCompanyReqT_CompanyStageEnum int32

const (
	C2S_QueryCompanyReqT_NULL_CompanyStageEnum C2S_QueryCompanyReqT_CompanyStageEnum = 0
	C2S_QueryCompanyReqT_TRIAL                 C2S_QueryCompanyReqT_CompanyStageEnum = 10 // 试用
	C2S_QueryCompanyReqT_BUSINESS_OPPORTUNITY  C2S_QueryCompanyReqT_CompanyStageEnum = 20 // 商机
	C2S_QueryCompanyReqT_PAY                   C2S_QueryCompanyReqT_CompanyStageEnum = 30 // 付费
	C2S_QueryCompanyReqT_OVERDUE               C2S_QueryCompanyReqT_CompanyStageEnum = 40 // 过期
)

// Enum value maps for C2S_QueryCompanyReqT_CompanyStageEnum.
var (
	C2S_QueryCompanyReqT_CompanyStageEnum_name = map[int32]string{
		0:  "NULL_CompanyStageEnum",
		10: "TRIAL",
		20: "BUSINESS_OPPORTUNITY",
		30: "PAY",
		40: "OVERDUE",
	}
	C2S_QueryCompanyReqT_CompanyStageEnum_value = map[string]int32{
		"NULL_CompanyStageEnum": 0,
		"TRIAL":                 10,
		"BUSINESS_OPPORTUNITY":  20,
		"PAY":                   30,
		"OVERDUE":               40,
	}
)

func (x C2S_QueryCompanyReqT_CompanyStageEnum) Enum() *C2S_QueryCompanyReqT_CompanyStageEnum {
	p := new(C2S_QueryCompanyReqT_CompanyStageEnum)
	*p = x
	return p
}

func (x C2S_QueryCompanyReqT_CompanyStageEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (C2S_QueryCompanyReqT_CompanyStageEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_OrgMagService_proto_enumTypes[1].Descriptor()
}

func (C2S_QueryCompanyReqT_CompanyStageEnum) Type() protoreflect.EnumType {
	return &file_OrgMagService_proto_enumTypes[1]
}

func (x C2S_QueryCompanyReqT_CompanyStageEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use C2S_QueryCompanyReqT_CompanyStageEnum.Descriptor instead.
func (C2S_QueryCompanyReqT_CompanyStageEnum) EnumDescriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{26, 1}
}

// 请求参数
type CompanyCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId            string `protobuf:"bytes,1,opt,name=openId,proto3" json:"openId,omitempty"`                        // 用户openId
	Company           string `protobuf:"bytes,2,opt,name=company,proto3" json:"company,omitempty"`                      // 公司名称
	OnlyCreateCompany bool   `protobuf:"varint,3,opt,name=onlyCreateCompany,proto3" json:"onlyCreateCompany,omitempty"` // 是否仅创建企业, 不添加管理员, 该值为false或不传入时, openId必传且有效
}

func (x *CompanyCreateRequest) Reset() {
	*x = CompanyCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyCreateRequest) ProtoMessage() {}

func (x *CompanyCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyCreateRequest.ProtoReflect.Descriptor instead.
func (*CompanyCreateRequest) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{0}
}

func (x *CompanyCreateRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CompanyCreateRequest) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CompanyCreateRequest) GetOnlyCreateCompany() bool {
	if x != nil {
		return x.OnlyCreateCompany
	}
	return false
}

type CompanyCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"` // 节点id
}

func (x *CompanyCreateReply) Reset() {
	*x = CompanyCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyCreateReply) ProtoMessage() {}

func (x *CompanyCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyCreateReply.ProtoReflect.Descriptor instead.
func (*CompanyCreateReply) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{1}
}

func (x *CompanyCreateReply) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type CompanyDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId    string `protobuf:"bytes,1,opt,name=openId,proto3" json:"openId,omitempty"`       // 用户openId
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"` // 节点id
}

func (x *CompanyDeleteRequest) Reset() {
	*x = CompanyDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyDeleteRequest) ProtoMessage() {}

func (x *CompanyDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyDeleteRequest.ProtoReflect.Descriptor instead.
func (*CompanyDeleteRequest) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyDeleteRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CompanyDeleteRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type CompanyDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"` // 删除的节点数量
}

func (x *CompanyDeleteReply) Reset() {
	*x = CompanyDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyDeleteReply) ProtoMessage() {}

func (x *CompanyDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyDeleteReply.ProtoReflect.Descriptor instead.
func (*CompanyDeleteReply) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{3}
}

func (x *CompanyDeleteReply) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type CompanyUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId    string `protobuf:"bytes,1,opt,name=openId,proto3" json:"openId,omitempty"`       // 用户openId
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"` //公司id
	Company   string `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`     // 公司名称
}

func (x *CompanyUpdateRequest) Reset() {
	*x = CompanyUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyUpdateRequest) ProtoMessage() {}

func (x *CompanyUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyUpdateRequest.ProtoReflect.Descriptor instead.
func (*CompanyUpdateRequest) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{4}
}

func (x *CompanyUpdateRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CompanyUpdateRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CompanyUpdateRequest) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

type CompanyUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId string `protobuf:"bytes,1,opt,name=openId,proto3" json:"openId,omitempty"` // 用户openId
}

func (x *CompanyUpdateReply) Reset() {
	*x = CompanyUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyUpdateReply) ProtoMessage() {}

func (x *CompanyUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyUpdateReply.ProtoReflect.Descriptor instead.
func (*CompanyUpdateReply) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{5}
}

func (x *CompanyUpdateReply) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

type GetCompanyListByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`   // 应用ID
	OpenId string `protobuf:"bytes,2,opt,name=openId,proto3" json:"openId,omitempty"` // 用户openId
}

func (x *GetCompanyListByIdRequest) Reset() {
	*x = GetCompanyListByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyListByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyListByIdRequest) ProtoMessage() {}

func (x *GetCompanyListByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyListByIdRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyListByIdRequest) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{6}
}

func (x *GetCompanyListByIdRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetCompanyListByIdRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

type C2S_GetCompanyListByUidReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,omitempty"` // uid
}

func (x *C2S_GetCompanyListByUidReqT) Reset() {
	*x = C2S_GetCompanyListByUidReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetCompanyListByUidReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetCompanyListByUidReqT) ProtoMessage() {}

func (x *C2S_GetCompanyListByUidReqT) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetCompanyListByUidReqT.ProtoReflect.Descriptor instead.
func (*C2S_GetCompanyListByUidReqT) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{7}
}

func (x *C2S_GetCompanyListByUidReqT) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type CompanyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`          // 应用ID
	Company    string `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`        // 公司名称
	CompanyId  string `protobuf:"bytes,4,opt,name=companyId,proto3" json:"companyId,omitempty"`    //公司id
	Source     string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`          // 资源
	UpdateTime int64  `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //更改时间
	UpdateBy   string `protobuf:"bytes,7,opt,name=updateBy,proto3" json:"updateBy,omitempty"`      //更改人
}

func (x *CompanyMsg) Reset() {
	*x = CompanyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyMsg) ProtoMessage() {}

func (x *CompanyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyMsg.ProtoReflect.Descriptor instead.
func (*CompanyMsg) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{8}
}

func (x *CompanyMsg) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *CompanyMsg) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CompanyMsg) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CompanyMsg) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CompanyMsg) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CompanyMsg) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type GetCompanyListByIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companys []*CompanyMsg `protobuf:"bytes,1,rep,name=companys,proto3" json:"companys,omitempty"`
}

func (x *GetCompanyListByIdReply) Reset() {
	*x = GetCompanyListByIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyListByIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyListByIdReply) ProtoMessage() {}

func (x *GetCompanyListByIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyListByIdReply.ProtoReflect.Descriptor instead.
func (*GetCompanyListByIdReply) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{9}
}

func (x *GetCompanyListByIdReply) GetCompanys() []*CompanyMsg {
	if x != nil {
		return x.Companys
	}
	return nil
}

type C2S_ListUserByOpenIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string   `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"` // 企业Id
	OpenId    []string `protobuf:"bytes,2,rep,name=openId,proto3" json:"openId,omitempty"`       // 用户openId
}

func (x *C2S_ListUserByOpenIdReq) Reset() {
	*x = C2S_ListUserByOpenIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_ListUserByOpenIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_ListUserByOpenIdReq) ProtoMessage() {}

func (x *C2S_ListUserByOpenIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_ListUserByOpenIdReq.ProtoReflect.Descriptor instead.
func (*C2S_ListUserByOpenIdReq) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{10}
}

func (x *C2S_ListUserByOpenIdReq) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *C2S_ListUserByOpenIdReq) GetOpenId() []string {
	if x != nil {
		return x.OpenId
	}
	return nil
}

type C2S_ListUserByOpenIdRpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*UserInfo `protobuf:"bytes,1,rep,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *C2S_ListUserByOpenIdRpn) Reset() {
	*x = C2S_ListUserByOpenIdRpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_ListUserByOpenIdRpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_ListUserByOpenIdRpn) ProtoMessage() {}

func (x *C2S_ListUserByOpenIdRpn) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_ListUserByOpenIdRpn.ProtoReflect.Descriptor instead.
func (*C2S_ListUserByOpenIdRpn) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{11}
}

func (x *C2S_ListUserByOpenIdRpn) GetUserInfo() []*UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type C2S_ListUserByUIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string   `protobuf:"bytes,10,opt,name=companyId,proto3" json:"companyId,omitempty"` // 企业Id
	Uid       []string `protobuf:"bytes,20,rep,name=uid,proto3" json:"uid,omitempty"`             // 用户openId
	AppId     string   `protobuf:"bytes,30,opt,name=appId,proto3" json:"appId,omitempty"`         // 调用的应用id
}

func (x *C2S_ListUserByUIdReq) Reset() {
	*x = C2S_ListUserByUIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_ListUserByUIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_ListUserByUIdReq) ProtoMessage() {}

func (x *C2S_ListUserByUIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_ListUserByUIdReq.ProtoReflect.Descriptor instead.
func (*C2S_ListUserByUIdReq) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{12}
}

func (x *C2S_ListUserByUIdReq) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *C2S_ListUserByUIdReq) GetUid() []string {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *C2S_ListUserByUIdReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId        *string           `protobuf:"bytes,1,opt,name=openId,proto3,oneof" json:"openId,omitempty"`                                                                                                // openId
	Name          *string           `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`                                                                                                    // 姓名
	EnName        *string           `protobuf:"bytes,3,opt,name=enName,proto3,oneof" json:"enName,omitempty"`                                                                                                // 英文名
	Avatar        *string           `protobuf:"bytes,4,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`                                                                                                // 头像
	AvatarBig     *string           `protobuf:"bytes,5,opt,name=avatarBig,proto3,oneof" json:"avatarBig,omitempty"`                                                                                          // 大头像
	AvatarMiddle  *string           `protobuf:"bytes,6,opt,name=avatarMiddle,proto3,oneof" json:"avatarMiddle,omitempty"`                                                                                    // 中头像
	AvatarThumb   *string           `protobuf:"bytes,7,opt,name=avatarThumb,proto3,oneof" json:"avatarThumb,omitempty"`                                                                                      // 头像缩略图
	Email         *string           `protobuf:"bytes,8,opt,name=email,proto3,oneof" json:"email,omitempty"`                                                                                                  // 邮箱
	Phone         *string           `protobuf:"bytes,9,opt,name=phone,proto3,oneof" json:"phone,omitempty"`                                                                                                  // 手机
	NodeId        *string           `protobuf:"bytes,10,opt,name=nodeId,proto3,oneof" json:"nodeId,omitempty"`                                                                                               // 节点ID
	IsInside      *string           `protobuf:"bytes,14,opt,name=isInside,proto3,oneof" json:"isInside,omitempty"`                                                                                           // 是否是企业内部成员, 0:内部, 1:外部
	CompanyId     *string           `protobuf:"bytes,15,opt,name=companyId,proto3,oneof" json:"companyId,omitempty"`                                                                                         // 企业id
	Company       *string           `protobuf:"bytes,16,opt,name=company,proto3,oneof" json:"company,omitempty"`                                                                                             // 企业名称
	FeishuOpenId  map[string]string `protobuf:"bytes,17,rep,name=feishuOpenId,proto3" json:"feishuOpenId,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //飞书opendId
	ZixelUserId   *string           `protobuf:"bytes,18,opt,name=zixelUserId,proto3,oneof" json:"zixelUserId,omitempty"`
	FeishuUnionId *string           `protobuf:"bytes,19,opt,name=feishuUnionId,proto3,oneof" json:"feishuUnionId,omitempty"` // 飞书unionId
	Role          string            `protobuf:"bytes,20,opt,name=role,proto3" json:"role,omitempty"`                         // 角色, 1:管理员/2:普通成员
	LinkedUser    bool              `protobuf:"varint,21,opt,name=linkedUser,proto3" json:"linkedUser,omitempty"`            // 是否与用户系统进行了关联
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{13}
}

func (x *UserInfo) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *UserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UserInfo) GetEnName() string {
	if x != nil && x.EnName != nil {
		return *x.EnName
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *UserInfo) GetAvatarBig() string {
	if x != nil && x.AvatarBig != nil {
		return *x.AvatarBig
	}
	return ""
}

func (x *UserInfo) GetAvatarMiddle() string {
	if x != nil && x.AvatarMiddle != nil {
		return *x.AvatarMiddle
	}
	return ""
}

func (x *UserInfo) GetAvatarThumb() string {
	if x != nil && x.AvatarThumb != nil {
		return *x.AvatarThumb
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *UserInfo) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *UserInfo) GetIsInside() string {
	if x != nil && x.IsInside != nil {
		return *x.IsInside
	}
	return ""
}

func (x *UserInfo) GetCompanyId() string {
	if x != nil && x.CompanyId != nil {
		return *x.CompanyId
	}
	return ""
}

func (x *UserInfo) GetCompany() string {
	if x != nil && x.Company != nil {
		return *x.Company
	}
	return ""
}

func (x *UserInfo) GetFeishuOpenId() map[string]string {
	if x != nil {
		return x.FeishuOpenId
	}
	return nil
}

func (x *UserInfo) GetZixelUserId() string {
	if x != nil && x.ZixelUserId != nil {
		return *x.ZixelUserId
	}
	return ""
}

func (x *UserInfo) GetFeishuUnionId() string {
	if x != nil && x.FeishuUnionId != nil {
		return *x.FeishuUnionId
	}
	return ""
}

func (x *UserInfo) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *UserInfo) GetLinkedUser() bool {
	if x != nil {
		return x.LinkedUser
	}
	return false
}

type C2S_AddCompanyUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // 姓名
	EmailOrMobile string `protobuf:"bytes,2,opt,name=emailOrMobile,proto3" json:"emailOrMobile,omitempty"` // 邮箱或手机号
	Role          string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`                   // 角色, 1:管理员/2:普通成员
	CompanyId     string `protobuf:"bytes,4,opt,name=companyId,proto3" json:"companyId,omitempty"`         // 企业id
}

func (x *C2S_AddCompanyUserReq) Reset() {
	*x = C2S_AddCompanyUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_AddCompanyUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_AddCompanyUserReq) ProtoMessage() {}

func (x *C2S_AddCompanyUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_AddCompanyUserReq.ProtoReflect.Descriptor instead.
func (*C2S_AddCompanyUserReq) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{14}
}

func (x *C2S_AddCompanyUserReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *C2S_AddCompanyUserReq) GetEmailOrMobile() string {
	if x != nil {
		return x.EmailOrMobile
	}
	return ""
}

func (x *C2S_AddCompanyUserReq) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *C2S_AddCompanyUserReq) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type C2S_AddCompanyUserRpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2S_AddCompanyUserRpn) Reset() {
	*x = C2S_AddCompanyUserRpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_AddCompanyUserRpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_AddCompanyUserRpn) ProtoMessage() {}

func (x *C2S_AddCompanyUserRpn) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_AddCompanyUserRpn.ProtoReflect.Descriptor instead.
func (*C2S_AddCompanyUserRpn) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{15}
}

type C2S_AddCompanyOutsideUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // 姓名
	EmailOrMobile string `protobuf:"bytes,2,opt,name=emailOrMobile,proto3" json:"emailOrMobile,omitempty"` // 邮箱或手机号
	Role          string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`                   // 角色, 1:管理员/2:普通成员
	CompanyId     string `protobuf:"bytes,4,opt,name=companyId,proto3" json:"companyId,omitempty"`         // 企业id
	Company       string `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`             // 企业名称
}

func (x *C2S_AddCompanyOutsideUserReq) Reset() {
	*x = C2S_AddCompanyOutsideUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_AddCompanyOutsideUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_AddCompanyOutsideUserReq) ProtoMessage() {}

func (x *C2S_AddCompanyOutsideUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_AddCompanyOutsideUserReq.ProtoReflect.Descriptor instead.
func (*C2S_AddCompanyOutsideUserReq) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{16}
}

func (x *C2S_AddCompanyOutsideUserReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *C2S_AddCompanyOutsideUserReq) GetEmailOrMobile() string {
	if x != nil {
		return x.EmailOrMobile
	}
	return ""
}

func (x *C2S_AddCompanyOutsideUserReq) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *C2S_AddCompanyOutsideUserReq) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *C2S_AddCompanyOutsideUserReq) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

type C2S_AddCompanyOutsideUserRpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2S_AddCompanyOutsideUserRpn) Reset() {
	*x = C2S_AddCompanyOutsideUserRpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_AddCompanyOutsideUserRpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_AddCompanyOutsideUserRpn) ProtoMessage() {}

func (x *C2S_AddCompanyOutsideUserRpn) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_AddCompanyOutsideUserRpn.ProtoReflect.Descriptor instead.
func (*C2S_AddCompanyOutsideUserRpn) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{17}
}

type C2S_DeleteUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`         // 节点ID
	UserOpenId string `protobuf:"bytes,2,opt,name=userOpenId,proto3" json:"userOpenId,omitempty"` // 用户的openId
}

func (x *C2S_DeleteUserReq) Reset() {
	*x = C2S_DeleteUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_DeleteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_DeleteUserReq) ProtoMessage() {}

func (x *C2S_DeleteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_DeleteUserReq.ProtoReflect.Descriptor instead.
func (*C2S_DeleteUserReq) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{18}
}

func (x *C2S_DeleteUserReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *C2S_DeleteUserReq) GetUserOpenId() string {
	if x != nil {
		return x.UserOpenId
	}
	return ""
}

type C2S_DeleteUserRpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2S_DeleteUserRpn) Reset() {
	*x = C2S_DeleteUserRpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_DeleteUserRpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_DeleteUserRpn) ProtoMessage() {}

func (x *C2S_DeleteUserRpn) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_DeleteUserRpn.ProtoReflect.Descriptor instead.
func (*C2S_DeleteUserRpn) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{19}
}

type C2S_UserQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId        string       `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`     // 节点ID
	IsInside      string       `protobuf:"bytes,2,opt,name=isInside,proto3" json:"isInside,omitempty"` // 是否是企业内部成员, 0:内部, 1:外部
	AppId         string       `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId,omitempty"`
	CompanyId     string       `protobuf:"bytes,4,opt,name=companyId,proto3" json:"companyId,omitempty"`          // 企业id
	Search        string       `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`                // 搜索数据, 目前可按姓名进行搜索
	Page          int32        `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`                   // 页码
	Size          int32        `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                   // 每页数量
	Orders        []*OrderItem `protobuf:"bytes,8,rep,name=orders,proto3" json:"orders,omitempty"`                // 排序方式
	LinkedUser    *bool        `protobuf:"varint,9,opt,name=linkedUser,proto3,oneof" json:"linkedUser,omitempty"` // 是否和用户系统进行了关联
	UserGroupCode string       `protobuf:"bytes,10,opt,name=userGroupCode,proto3" json:"userGroupCode,omitempty"` //用户组code
	Skip          *int64       `protobuf:"varint,15,opt,name=skip,proto3,oneof" json:"skip,omitempty"`
	Role          *string      `protobuf:"bytes,20,opt,name=role,proto3,oneof" json:"role,omitempty"` // 角色, 1:管理员/2:普通成员
}

func (x *C2S_UserQueryReq) Reset() {
	*x = C2S_UserQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UserQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UserQueryReq) ProtoMessage() {}

func (x *C2S_UserQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UserQueryReq.ProtoReflect.Descriptor instead.
func (*C2S_UserQueryReq) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{20}
}

func (x *C2S_UserQueryReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *C2S_UserQueryReq) GetIsInside() string {
	if x != nil {
		return x.IsInside
	}
	return ""
}

func (x *C2S_UserQueryReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *C2S_UserQueryReq) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *C2S_UserQueryReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *C2S_UserQueryReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *C2S_UserQueryReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *C2S_UserQueryReq) GetOrders() []*OrderItem {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *C2S_UserQueryReq) GetLinkedUser() bool {
	if x != nil && x.LinkedUser != nil {
		return *x.LinkedUser
	}
	return false
}

func (x *C2S_UserQueryReq) GetUserGroupCode() string {
	if x != nil {
		return x.UserGroupCode
	}
	return ""
}

func (x *C2S_UserQueryReq) GetSkip() int64 {
	if x != nil && x.Skip != nil {
		return *x.Skip
	}
	return 0
}

func (x *C2S_UserQueryReq) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

type C2S_UserQueryRpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总记录数
	UserInfo []*UserInfo `protobuf:"bytes,2,rep,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *C2S_UserQueryRpn) Reset() {
	*x = C2S_UserQueryRpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_UserQueryRpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_UserQueryRpn) ProtoMessage() {}

func (x *C2S_UserQueryRpn) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_UserQueryRpn.ProtoReflect.Descriptor instead.
func (*C2S_UserQueryRpn) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{21}
}

func (x *C2S_UserQueryRpn) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *C2S_UserQueryRpn) GetUserInfo() []*UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type OrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // 排序字段
	Order string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"` // 排序方向，asc升序，deac降序
}

func (x *OrderItem) Reset() {
	*x = OrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItem) ProtoMessage() {}

func (x *OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItem.ProtoReflect.Descriptor instead.
func (*OrderItem) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{22}
}

func (x *OrderItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OrderItem) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type C2S_GetCompanyByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"` // 企业id
}

func (x *C2S_GetCompanyByIdReq) Reset() {
	*x = C2S_GetCompanyByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_GetCompanyByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_GetCompanyByIdReq) ProtoMessage() {}

func (x *C2S_GetCompanyByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_GetCompanyByIdReq.ProtoReflect.Descriptor instead.
func (*C2S_GetCompanyByIdReq) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{23}
}

func (x *C2S_GetCompanyByIdReq) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type C2S_AddExistUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`                         // 姓名
	EmailOrMobile *string `protobuf:"bytes,20,opt,name=emailOrMobile,proto3,oneof" json:"emailOrMobile,omitempty"` // 邮箱或手机号
	Role          string  `protobuf:"bytes,30,opt,name=role,proto3" json:"role,omitempty"`                         // 角色, 1:管理员/2:普通成员
	CompanyId     string  `protobuf:"bytes,40,opt,name=companyId,proto3" json:"companyId,omitempty"`               // 企业id
	Company       *string `protobuf:"bytes,50,opt,name=company,proto3,oneof" json:"company,omitempty"`             // 添加的是企业外部联系人时, 这个字段需要给入
	OpenId        string  `protobuf:"bytes,60,opt,name=openId,proto3" json:"openId,omitempty"`                     // openId
	ZixelUserId   *string `protobuf:"bytes,70,opt,name=zixelUserId,proto3,oneof" json:"zixelUserId,omitempty"`     // userid, 不传入时, 会根据openid去获取
	IsInside      string  `protobuf:"bytes,80,opt,name=isInside,proto3" json:"isInside,omitempty"`                 // 是否是企业内部成员, 0:内部, 1:外部
}

func (x *C2S_AddExistUserReq) Reset() {
	*x = C2S_AddExistUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_AddExistUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_AddExistUserReq) ProtoMessage() {}

func (x *C2S_AddExistUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_AddExistUserReq.ProtoReflect.Descriptor instead.
func (*C2S_AddExistUserReq) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{24}
}

func (x *C2S_AddExistUserReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *C2S_AddExistUserReq) GetEmailOrMobile() string {
	if x != nil && x.EmailOrMobile != nil {
		return *x.EmailOrMobile
	}
	return ""
}

func (x *C2S_AddExistUserReq) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *C2S_AddExistUserReq) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *C2S_AddExistUserReq) GetCompany() string {
	if x != nil && x.Company != nil {
		return *x.Company
	}
	return ""
}

func (x *C2S_AddExistUserReq) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *C2S_AddExistUserReq) GetZixelUserId() string {
	if x != nil && x.ZixelUserId != nil {
		return *x.ZixelUserId
	}
	return ""
}

func (x *C2S_AddExistUserReq) GetIsInside() string {
	if x != nil {
		return x.IsInside
	}
	return ""
}

type C2S_AddExistUserRpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *C2S_AddExistUserRpn) Reset() {
	*x = C2S_AddExistUserRpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_AddExistUserRpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_AddExistUserRpn) ProtoMessage() {}

func (x *C2S_AddExistUserRpn) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_AddExistUserRpn.ProtoReflect.Descriptor instead.
func (*C2S_AddExistUserRpn) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{25}
}

type C2S_QueryCompanyReqT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                 `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`               // 企业名称
	AdminSearch   string                                 `protobuf:"bytes,20,opt,name=adminSearch,proto3" json:"adminSearch,omitempty"` // 管理员信息
	CompanySource C2S_QueryCompanyReqT_CompanySourceEnum `protobuf:"varint,30,opt,name=companySource,proto3,enum=structure.C2S_QueryCompanyReqT_CompanySourceEnum" json:"companySource,omitempty"`
	CompanyStage  C2S_QueryCompanyReqT_CompanyStageEnum  `protobuf:"varint,40,opt,name=companyStage,proto3,enum=structure.C2S_QueryCompanyReqT_CompanyStageEnum" json:"companyStage,omitempty"`
	Page          int32                                  `protobuf:"varint,50,opt,name=page,proto3" json:"page,omitempty"`    // 页码
	Size          int32                                  `protobuf:"varint,60,opt,name=size,proto3" json:"size,omitempty"`    // 每页数量
	Orders        []*OrderItem                           `protobuf:"bytes,70,rep,name=orders,proto3" json:"orders,omitempty"` // 排序方式
	InvokeAppId   string                                 `protobuf:"bytes,80,opt,name=invokeAppId,proto3" json:"invokeAppId,omitempty"`
}

func (x *C2S_QueryCompanyReqT) Reset() {
	*x = C2S_QueryCompanyReqT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_QueryCompanyReqT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_QueryCompanyReqT) ProtoMessage() {}

func (x *C2S_QueryCompanyReqT) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_QueryCompanyReqT.ProtoReflect.Descriptor instead.
func (*C2S_QueryCompanyReqT) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{26}
}

func (x *C2S_QueryCompanyReqT) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *C2S_QueryCompanyReqT) GetAdminSearch() string {
	if x != nil {
		return x.AdminSearch
	}
	return ""
}

func (x *C2S_QueryCompanyReqT) GetCompanySource() C2S_QueryCompanyReqT_CompanySourceEnum {
	if x != nil {
		return x.CompanySource
	}
	return C2S_QueryCompanyReqT_NULL_CompanySourceEnum
}

func (x *C2S_QueryCompanyReqT) GetCompanyStage() C2S_QueryCompanyReqT_CompanyStageEnum {
	if x != nil {
		return x.CompanyStage
	}
	return C2S_QueryCompanyReqT_NULL_CompanyStageEnum
}

func (x *C2S_QueryCompanyReqT) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *C2S_QueryCompanyReqT) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *C2S_QueryCompanyReqT) GetOrders() []*OrderItem {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *C2S_QueryCompanyReqT) GetInvokeAppId() string {
	if x != nil {
		return x.InvokeAppId
	}
	return ""
}

type C2S_QueryCompanyRpnT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       int64         `protobuf:"varint,10,opt,name=total,proto3" json:"total,omitempty"`
	CompanyList []*CompanyMsg `protobuf:"bytes,1,rep,name=companyList,proto3" json:"companyList,omitempty"`
}

func (x *C2S_QueryCompanyRpnT) Reset() {
	*x = C2S_QueryCompanyRpnT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S_QueryCompanyRpnT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S_QueryCompanyRpnT) ProtoMessage() {}

func (x *C2S_QueryCompanyRpnT) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S_QueryCompanyRpnT.ProtoReflect.Descriptor instead.
func (*C2S_QueryCompanyRpnT) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{27}
}

func (x *C2S_QueryCompanyRpnT) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *C2S_QueryCompanyRpnT) GetCompanyList() []*CompanyMsg {
	if x != nil {
		return x.CompanyList
	}
	return nil
}

type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{28}
}

func (x *ErrorInfo) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ErrorInfoServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Uuid string `protobuf:"bytes,20,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ErrorInfoServiceInfo) Reset() {
	*x = ErrorInfoServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrgMagService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfoServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfoServiceInfo) ProtoMessage() {}

func (x *ErrorInfoServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OrgMagService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfoServiceInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfoServiceInfo) Descriptor() ([]byte, []int) {
	return file_OrgMagService_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ErrorInfoServiceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ErrorInfoServiceInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

var File_OrgMagService_proto protoreflect.FileDescriptor

var file_OrgMagService_proto_rawDesc = []byte{
	0x0a, 0x13, 0x4f, 0x72, 0x67, 0x4d, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x76, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x6c,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x32, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x66, 0x0a,
	0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x2c, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x1c, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x22, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x73, 0x22, 0x4f, 0x0a, 0x17, 0x43, 0x32, 0x53, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x22, 0x4a, 0x0a, 0x17, 0x43, 0x32, 0x53, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x70, 0x6e, 0x12, 0x2f, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c,
	0x0a, 0x14, 0x43, 0x32, 0x53, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x55, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xf6, 0x06, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x42, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x0c, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x65,
	0x69, 0x73, 0x68, 0x75, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0b, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x66,
	0x65, 0x69, 0x73, 0x68, 0x75, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x65, 0x69, 0x73, 0x68, 0x75, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x4f, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x43,
	0x32, 0x53, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x70, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x4f, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x1e, 0x0a, 0x1c, 0x43,
	0x32, 0x53, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x6e, 0x22, 0x4b, 0x0a, 0x11, 0x43,
	0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x32, 0x53, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x6e, 0x22, 0x86, 0x03,
	0x0a, 0x10, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73,
	0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x10, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x70, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x33, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0xae, 0x02,
	0x0a, 0x13, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x64, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x4f, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0b, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x15,
	0x0a, 0x13, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x64, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x70, 0x6e, 0x22, 0xa7, 0x04, 0x0a, 0x15, 0x43, 0x32, 0x53, 0x5f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x45,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x45, 0x49, 0x5f, 0x53, 0x48, 0x55, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03,
	0x57, 0x45, 0x42, 0x10, 0x14, 0x22, 0x68, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x0a, 0x12,
	0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x41, 0x59,
	0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x56, 0x45, 0x52, 0x44, 0x55, 0x45, 0x10, 0x28, 0x22,
	0x66, 0x0a, 0x15, 0x43, 0x32, 0x53, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x32, 0xd6, 0x09, 0x0a, 0x0d, 0x4f, 0x72,
	0x67, 0x4d, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1f, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x1f, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x43, 0x32, 0x53, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x70, 0x6e, 0x5f, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x5f, 0x74, 0x1a, 0x22, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x70, 0x6e, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32,
	0x53, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43,
	0x32, 0x53, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x6e, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43,
	0x32, 0x53, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x6e, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x43, 0x32, 0x53, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x70,
	0x6e, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x43, 0x32, 0x53, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53,
	0x5f, 0x41, 0x64, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x32, 0x53,
	0x5f, 0x41, 0x64, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x6e,
	0x22, 0x00, 0x42, 0x42, 0x0a, 0x24, 0x63, 0x6e, 0x2e, 0x7a, 0x69, 0x78, 0x65, 0x6c, 0x2e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x69, 0x62, 0x42, 0x0b, 0x4f, 0x72, 0x67, 0x4d,
	0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_OrgMagService_proto_rawDescOnce sync.Once
	file_OrgMagService_proto_rawDescData = file_OrgMagService_proto_rawDesc
)

func file_OrgMagService_proto_rawDescGZIP() []byte {
	file_OrgMagService_proto_rawDescOnce.Do(func() {
		file_OrgMagService_proto_rawDescData = protoimpl.X.CompressGZIP(file_OrgMagService_proto_rawDescData)
	})
	return file_OrgMagService_proto_rawDescData
}

var file_OrgMagService_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_OrgMagService_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_OrgMagService_proto_goTypes = []interface{}{
	(C2S_QueryCompanyReqT_CompanySourceEnum)(0), // 0: structure.C2S_QueryCompanyReq_t.CompanySourceEnum
	(C2S_QueryCompanyReqT_CompanyStageEnum)(0),  // 1: structure.C2S_QueryCompanyReq_t.CompanyStageEnum
	(*CompanyCreateRequest)(nil),                // 2: structure.CompanyCreateRequest
	(*CompanyCreateReply)(nil),                  // 3: structure.CompanyCreateReply
	(*CompanyDeleteRequest)(nil),                // 4: structure.CompanyDeleteRequest
	(*CompanyDeleteReply)(nil),                  // 5: structure.CompanyDeleteReply
	(*CompanyUpdateRequest)(nil),                // 6: structure.CompanyUpdateRequest
	(*CompanyUpdateReply)(nil),                  // 7: structure.CompanyUpdateReply
	(*GetCompanyListByIdRequest)(nil),           // 8: structure.GetCompanyListByIdRequest
	(*C2S_GetCompanyListByUidReqT)(nil),         // 9: structure.C2S_GetCompanyListByUidReq_t
	(*CompanyMsg)(nil),                          // 10: structure.CompanyMsg
	(*GetCompanyListByIdReply)(nil),             // 11: structure.GetCompanyListByIdReply
	(*C2S_ListUserByOpenIdReq)(nil),             // 12: structure.C2S_ListUserByOpenIdReq
	(*C2S_ListUserByOpenIdRpn)(nil),             // 13: structure.C2S_ListUserByOpenIdRpn
	(*C2S_ListUserByUIdReq)(nil),                // 14: structure.C2S_ListUserByUIdReq
	(*UserInfo)(nil),                            // 15: structure.UserInfo
	(*C2S_AddCompanyUserReq)(nil),               // 16: structure.C2S_AddCompanyUserReq
	(*C2S_AddCompanyUserRpn)(nil),               // 17: structure.C2S_AddCompanyUserRpn
	(*C2S_AddCompanyOutsideUserReq)(nil),        // 18: structure.C2S_AddCompanyOutsideUserReq
	(*C2S_AddCompanyOutsideUserRpn)(nil),        // 19: structure.C2S_AddCompanyOutsideUserRpn
	(*C2S_DeleteUserReq)(nil),                   // 20: structure.C2S_DeleteUserReq
	(*C2S_DeleteUserRpn)(nil),                   // 21: structure.C2S_DeleteUserRpn
	(*C2S_UserQueryReq)(nil),                    // 22: structure.C2S_UserQueryReq
	(*C2S_UserQueryRpn)(nil),                    // 23: structure.C2S_UserQueryRpn
	(*OrderItem)(nil),                           // 24: structure.OrderItem
	(*C2S_GetCompanyByIdReq)(nil),               // 25: structure.C2S_GetCompanyByIdReq
	(*C2S_AddExistUserReq)(nil),                 // 26: structure.C2S_AddExistUserReq
	(*C2S_AddExistUserRpn)(nil),                 // 27: structure.C2S_AddExistUserRpn
	(*C2S_QueryCompanyReqT)(nil),                // 28: structure.C2S_QueryCompanyReq_t
	(*C2S_QueryCompanyRpnT)(nil),                // 29: structure.C2S_QueryCompanyRpn_t
	(*ErrorInfo)(nil),                           // 30: structure.ErrorInfo
	nil,                                         // 31: structure.UserInfo.FeishuOpenIdEntry
	(*ErrorInfoServiceInfo)(nil),                // 32: structure.ErrorInfo.serviceInfo
}
var file_OrgMagService_proto_depIdxs = []int32{
	10, // 0: structure.GetCompanyListByIdReply.companys:type_name -> structure.CompanyMsg
	15, // 1: structure.C2S_ListUserByOpenIdRpn.userInfo:type_name -> structure.UserInfo
	31, // 2: structure.UserInfo.feishuOpenId:type_name -> structure.UserInfo.FeishuOpenIdEntry
	24, // 3: structure.C2S_UserQueryReq.orders:type_name -> structure.OrderItem
	15, // 4: structure.C2S_UserQueryRpn.userInfo:type_name -> structure.UserInfo
	0,  // 5: structure.C2S_QueryCompanyReq_t.companySource:type_name -> structure.C2S_QueryCompanyReq_t.CompanySourceEnum
	1,  // 6: structure.C2S_QueryCompanyReq_t.companyStage:type_name -> structure.C2S_QueryCompanyReq_t.CompanyStageEnum
	24, // 7: structure.C2S_QueryCompanyReq_t.orders:type_name -> structure.OrderItem
	10, // 8: structure.C2S_QueryCompanyRpn_t.companyList:type_name -> structure.CompanyMsg
	2,  // 9: structure.OrgMagService.CreateCompany:input_type -> structure.CompanyCreateRequest
	4,  // 10: structure.OrgMagService.DeleteCompany:input_type -> structure.CompanyDeleteRequest
	6,  // 11: structure.OrgMagService.UpdateCompany:input_type -> structure.CompanyUpdateRequest
	28, // 12: structure.OrgMagService.QueryCompany:input_type -> structure.C2S_QueryCompanyReq_t
	8,  // 13: structure.OrgMagService.GetCompanyListById:input_type -> structure.GetCompanyListByIdRequest
	9,  // 14: structure.OrgMagService.GetCompanyListByUid:input_type -> structure.C2S_GetCompanyListByUidReq_t
	12, // 15: structure.OrgMagService.listUserByOpenId:input_type -> structure.C2S_ListUserByOpenIdReq
	14, // 16: structure.OrgMagService.listUserByUid:input_type -> structure.C2S_ListUserByUIdReq
	16, // 17: structure.OrgMagService.addCompanyUser:input_type -> structure.C2S_AddCompanyUserReq
	18, // 18: structure.OrgMagService.addCompanyOutsideUser:input_type -> structure.C2S_AddCompanyOutsideUserReq
	20, // 19: structure.OrgMagService.deleteUser:input_type -> structure.C2S_DeleteUserReq
	22, // 20: structure.OrgMagService.queryUsers:input_type -> structure.C2S_UserQueryReq
	25, // 21: structure.OrgMagService.getCompanyById:input_type -> structure.C2S_GetCompanyByIdReq
	26, // 22: structure.OrgMagService.addExistUser:input_type -> structure.C2S_AddExistUserReq
	3,  // 23: structure.OrgMagService.CreateCompany:output_type -> structure.CompanyCreateReply
	5,  // 24: structure.OrgMagService.DeleteCompany:output_type -> structure.CompanyDeleteReply
	7,  // 25: structure.OrgMagService.UpdateCompany:output_type -> structure.CompanyUpdateReply
	29, // 26: structure.OrgMagService.QueryCompany:output_type -> structure.C2S_QueryCompanyRpn_t
	11, // 27: structure.OrgMagService.GetCompanyListById:output_type -> structure.GetCompanyListByIdReply
	11, // 28: structure.OrgMagService.GetCompanyListByUid:output_type -> structure.GetCompanyListByIdReply
	13, // 29: structure.OrgMagService.listUserByOpenId:output_type -> structure.C2S_ListUserByOpenIdRpn
	13, // 30: structure.OrgMagService.listUserByUid:output_type -> structure.C2S_ListUserByOpenIdRpn
	17, // 31: structure.OrgMagService.addCompanyUser:output_type -> structure.C2S_AddCompanyUserRpn
	19, // 32: structure.OrgMagService.addCompanyOutsideUser:output_type -> structure.C2S_AddCompanyOutsideUserRpn
	21, // 33: structure.OrgMagService.deleteUser:output_type -> structure.C2S_DeleteUserRpn
	23, // 34: structure.OrgMagService.queryUsers:output_type -> structure.C2S_UserQueryRpn
	10, // 35: structure.OrgMagService.getCompanyById:output_type -> structure.CompanyMsg
	27, // 36: structure.OrgMagService.addExistUser:output_type -> structure.C2S_AddExistUserRpn
	23, // [23:37] is the sub-list for method output_type
	9,  // [9:23] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_OrgMagService_proto_init() }
func file_OrgMagService_proto_init() {
	if File_OrgMagService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_OrgMagService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyListByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetCompanyListByUidReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyListByIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_ListUserByOpenIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_ListUserByOpenIdRpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_ListUserByUIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_AddCompanyUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_AddCompanyUserRpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_AddCompanyOutsideUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_AddCompanyOutsideUserRpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_DeleteUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_DeleteUserRpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UserQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_UserQueryRpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_GetCompanyByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_AddExistUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_AddExistUserRpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_QueryCompanyReqT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S_QueryCompanyRpnT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrgMagService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfoServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_OrgMagService_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_OrgMagService_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_OrgMagService_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_OrgMagService_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_OrgMagService_proto_goTypes,
		DependencyIndexes: file_OrgMagService_proto_depIdxs,
		EnumInfos:         file_OrgMagService_proto_enumTypes,
		MessageInfos:      file_OrgMagService_proto_msgTypes,
	}.Build()
	File_OrgMagService_proto = out.File
	file_OrgMagService_proto_rawDesc = nil
	file_OrgMagService_proto_goTypes = nil
	file_OrgMagService_proto_depIdxs = nil
}
